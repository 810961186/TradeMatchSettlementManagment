<?xml version="1.0"?>
<doc>
    <assembly>
        <name>GTA.RealTIme.CommonClass</name>
    </assembly>
    <members>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipOutputStream">
            <summary>
            This is a DeflaterOutputStream that writes the files into a zip
            archive one after another.  It has a special method to start a new
            zip entry.  The zip entries contains information about the file name
            size, compressed size, CRC, etc.
            
            It includes support for Stored and Deflated entries.
            This class is not thread safe.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example> This sample shows how to create a zip file
            <code>
            using System;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		string[] filenames = Directory.GetFiles(args[0]);
            		
            		ZipOutputStream s = new ZipOutputStream(File.Create(args[1]));
            		
            		s.SetLevel(5); // 0 - store only to 9 - means best compression
            		
            		foreach (string file in filenames) {
            			FileStream fs = File.OpenRead(file);
            			
            			byte[] buffer = new byte[fs.Length];
            			fs.Read(buffer, 0, buffer.Length);
            			
            			ZipEntry entry = new ZipEntry(file);
            			
            			s.PutNextEntry(entry);
            			
            			s.Write(buffer, 0, buffer.Length);
            			
            		}
            		
            		s.Finish();
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream">
            <summary>
            A special stream deflating or compressing the bytes that are
            written to it.  It uses a Deflater to perform actual deflating.<br/>
            Authors of the original java version : Tom Tromey, Jochen Hoenicke 
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.buf">
            <summary>
            This buffer is used temporarily to retrieve the bytes from the
            deflater and write them to the underlying output stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.def">
            <summary>
            The deflater which is used to deflate the stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.baseOutputStream">
            <summary>
            Base stream the deflater depends on.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value. Not supported by this class!
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position by one
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from stream
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginRead(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous reads are not supported a NotSupportedException is always thrown
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Asynchronous writes arent supported, a NotSupportedException is always thrown
            </summary>
            <param name="buffer"></param>
            <param name="offset"></param>
            <param name="count"></param>
            <param name="callback"></param>
            <param name="state"></param>
            <returns></returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Deflate">
            <summary>
            Deflates everything in the input buffers.  This will call
            <code>def.deflate()</code> until all bytes from the input buffers
            are processed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new DeflaterOutputStream with a default Deflater and default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            default buffer size.
            </summary>
            <param name="baseOutputStream">
            the output stream where deflated output should be written.
            </param>
            <param name="defl">
            the underlying deflater.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Deflater,System.Int32)">
            <summary>
            Creates a new DeflaterOutputStream with the given Deflater and
            buffer size.
            </summary>
            <param name="baseOutputStream">
            The output stream where deflated output is written.
            </param>
            <param name="deflater">
            The underlying deflater to use
            </param>
            <param name="bufsize">
            The buffer size to use when deflating
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">
            bufsize is less than or equal to zero.
            </exception>
            <exception cref="T:System.ArgumentException">
            baseOutputStream does not support writing
            </exception>
            <exception cref="T:System.ArgumentNullException">
            deflater instance is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Flush">
            <summary>
            Flushes the stream by calling flush() on the deflater and then
            on the underlying stream.  This ensures that all bytes are
            flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Finish">
            <summary>
            Finishes the stream by calling finish() on the deflater. 
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Not all input is deflated
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close">
            <summary>
            Calls finish() and closes the underlying
            stream when <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner"></see> is true.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a single byte to the compressed output stream.
            </summary>
            <param name="bval">
            The byte value.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes from an array to the compressed stream.
            </summary>
            <param name="buf">
            The byte array
            </param>
            <param name="off">
            The offset into the byte array where to start.
            </param>
            <param name="len">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptByte">
            <summary>
            Encrypt a single byte 
            </summary>
            <returns>
            The encrypted value
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.EncryptBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Encrypt a block of data
            </summary>
            <param name="buffer">
            Data to encrypt.  NOTE the original contents of the buffer are lost
            </param>
            <param name="offset">
            Offset of first byte in buffer to encrypt
            </param>
            <param name="length">
            Number of bytes in buffer to encrypt
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.InitializePassword(System.String)">
            <summary>
            Initializes encryption keys based on given password
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Close"></see> will close the underlying stream also.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanPatchEntries">
            <summary>
            Allows client to determine if an entry can be patched after its added
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanRead">
            <summary>
            Gets value indicating stream can be read from
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanSeek">
            <summary>
            Gets a value indicating if seeking is supported for this stream
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.CanWrite">
            <summary>
            Get value indicating if this stream supports writing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Length">
            <summary>
            Get current length of stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Position">
            <summary>
            The current position within the stream.
            Always throws a NotSupportedExceptionNotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream.Password">
            <summary>
            Get/set the password used for encryption.  When null no encryption is performed
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip output stream, writing a zip archive.
            </summary>
            <param name="baseOutputStream">
            The output stream to which the archive contents are written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetComment(System.String)">
            <summary>
            Set the zip file comment.
            </summary>
            <param name="comment">
            The comment string
            </param>
            <exception name ="ArgumentOutOfRangeException">
            Encoding of comment is longer than 0xffff bytes.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets default compression level.  The new level will be activated
            immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.GetLevel">
            <summary>
            Get the current deflate compression level
            </summary>
            <returns>The current compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeShort(System.Int32)">
            <summary>
            Write an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeInt(System.Int32)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.WriteLeLong(System.Int64)">
            <summary>
            Write an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.PutNextEntry(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Starts a new Zip entry. It automatically closes the previous
            entry if present.
            All entry elements bar name are optional, but must be correct if present.
            If the compression method is stored and the output is not patchable
            the compression for that entry is automatically changed to deflate level 0
            </summary>
            <param name="entry">
            the entry.
            </param>
            <exception cref="T:System.IO.IOException">
            if an I/O error occured.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            if stream was finished
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Too many entries in the Zip file<br/>
            Entry name is too long<br/>
            Finish has already been called<br/>
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.CloseEntry">
            <summary>
            Closes the current entry, updating header and footer information as required
            </summary>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes the given buffer to the current entry.
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Archive size is invalid
            </exception>
            <exception cref="T:System.InvalidOperationException">
            No entry is active.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.Finish">
            <summary>
            Finishes the stream.  This will write the central directory at the
            end of the zip file and flush the stream.
            </summary>
            <remarks>
            This is automatically called when the stream is closed.
            </remarks>
            <exception cref="T:System.IO.IOException">
            An I/O error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Comment exceeds the maximum length<br/>
            Entry name exceeds the maximum length
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipOutputStream.IsFinished">
            <summary>
            Gets boolean indicating central header has been added for this archive...
            No further entries can be added once this has been done.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarException">
            <summary>
            TarExceptions are used for exceptions specific to tar classes and code.	
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            <summary>
            SharpZipBaseException is the base exception class for the SharpZipLibrary.
            All library exceptions are derived from this.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class with a specified error message.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.SharpZipBaseException.#ctor(System.String,System.Exception)">
            <summary>
            Initializes a new instance of the SharpZipLibraryException class with a specified
            error message and a reference to the inner exception that is the cause of this exception.
            </summary>
            <param name="message">Error message string</param>
            <param name="innerException">The inner exception</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarException.#ctor">
            <summary>
            Initialises a new instance of the TarException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the TarException class with a specified message.
            </summary>
            <param name="message">The message that describes the error.</param>
        </member>
        <member name="T:RealTime.Common.CommonClass.ComEntity">
            <summary>
            ComEntity通用实体类(表格不支持别名)
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetTableStructBySQL(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            取得指定查询的表结构( SQL )
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_objConn">连接对象</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetTableStructBySQL(System.String,System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            取得指定查询的表结构( SQL )
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_objConn">连接对象</param>
            <param name="_dtName">内存表名称</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetTableStructBySQL(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            取得指定查询的表结构( SQL + 事务 )
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_trans">事务</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetTableStructBySQL(System.String,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            取得指定查询的表结构( SQL )
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_trans">事务</param>
            <param name="_dtName">内存表名称</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetTableStruct(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            取得指定表结构
            </summary>
            <param name="_dbTableName">数据库表格名</param>
            <param name="_objConn">连接对象</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetTableStruct(System.String,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            取得指定表结构( dbFieldList )
            </summary>
            <param name="_dbTableName">数据库表格名</param>
            <param name="_dbFieldList">数据库字段列表</param>
            <param name="_objConn">连接对象</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetTableStruct(System.String,System.String,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            取得指定表结构( dtFieldList + asFieldList )
            </summary>
            <param name="_dbtableName">表格名</param>
            <param name="_dtFieldList">内存表字段列表</param>
            <param name="_asFieldList">映射关系</param>
            <param name="_objConn">连接对象</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetTableStruct(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            取得指定表结构(事务)
            </summary>
            <param name="_dbTableName">数据库表格名</param>
            <param name="_trans">事务</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetTableStruct(System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            取得指定表结构( dbFieldList + 事务 )
            </summary>
            <param name="_dbTableName">数据库表格名</param>
            <param name="_dbFieldList">数据库字段列表</param>
            <param name="_trans">事务</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetTableStruct(System.String,System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            取得指定表结构( dtFieldList + asFieldList + 事务 )
            </summary>
            <param name="_dbtableName">表格名</param>
            <param name="_dtFieldList">内存表字段列表</param>
            <param name="_asFieldList">映射关系</param>
            <param name="_trans">事务</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateRowBySQL(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            创建新数据行( SQL )
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_objConn">连接对象</param>
            <returns>数据行</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateRow(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            创建新数据行
            </summary>
            <param name="_dbTableName">数据库表格名</param>
            <param name="_objConn">连接对象</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateRow(System.String,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            创建新数据行( fieldList )
            </summary>
            <param name="_dbTableName">表格名</param>
            <param name="_asFieldList">数据库字段列表</param>
            <param name="_objConn">连接对象</param>
            <returns>数据行</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateRow(System.String,System.String,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            创建新数据行
            </summary>
            <param name="_dbTableName">表格名</param>
            <param name="_dtFieldList">内存字段列表</param>
            <param name="_asFieldList">映射关系</param>
            <param name="_objConn">连接对象</param>
            <returns>数据行</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateRowBySQL(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            创建新数据行( SQL + 事务 )
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_trans">事务</param>
            <returns>数据行</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateRow(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            创建新数据行 + 事务
            </summary>
            <param name="_dbTableName">数据库表格名</param>
            <param name="_trans">事务</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateRow(System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            创建新数据行( fieldList + 事务 )
            </summary>
            <param name="_dbTableName">表格名</param>
            <param name="_asFieldList">数据库字段列表</param>
            <param name="_trans">事务</param>
            <returns>数据行</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateRow(System.String,System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            创建新数据行( dtFieldList + asFieldList + 事务)
            </summary>
            <param name="_dbTableName">表格名</param>
            <param name="_dtFieldList">内存字段列表</param>
            <param name="_asFieldList">映射关系</param>
            <param name="_trans">事务</param>
            <returns>数据行</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Select(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            查询指定条件的数据返回数据集(连接+自动表名)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_objConn">连接对象</param>
            <returns>结果对象</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Select(System.String,System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            查询指定条件的数据返回数据集(事务+填充表名)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_objConn">连接对象</param>
            <param name="_fillTableName">DataTable中的表名</param>
            <returns>结果对象</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Select(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            查询指定条件的数据返回数据集(事务+自动表名)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_trans">事务对象</param>
            <returns>结果对象</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Select(System.String,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            查询指定条件的数据返回数据集(事务+填充表名)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_trans">事务对象</param>
            <param name="_fillTableName">DataTable中的表名</param>
            <returns>结果对象</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.SelectByPrimary(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection)">
            <summary>
            读取指定的SQL语句读取分页数据(连接---主键无顺序)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_primaryName">主键名(仅支持单键)</param>
            <param name="_startPageIndex">起始页码(从1开始)</param>
            <param name="_pageSize">每页记录数据</param>
            <param name="_isGetRows">是否查询记录行数</param>
            <param name="_objConn">连接对象</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.SelectByPrimary(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Data.SqlClient.SqlTransaction)">
            <summary>
            读取指定的SQL语句读取分页数据(事务---主键无顺序)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_primaryName">主键名(仅支持单键)</param>
            <param name="_startPageIndex">起始页码(从1开始)</param>
            <param name="_pageSize">每页记录数据</param>
            <param name="_isGetRows">是否查询记录行数</param>
            <param name="_trans">事务</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.SelectByOrderPrimary(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection)">
            <summary>
            读取指定的SQL语句读取分页数据(连接---主键有顺序)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_primaryName">唯一键列名(仅支持单键)</param>
            <param name="_startPageIndex">起始页码(从1开始)</param>
            <param name="_pageSize">每页记录数据</param>
            <param name="_isGetRows">是否查询记录行数</param>
            <param name="_objConn">连接对象</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.SelectByOrderPrimary(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Data.SqlClient.SqlTransaction)">
            <summary>
            读取指定的SQL语句读取分页数据(事务---主键有顺序)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_primaryName">主键名(仅支持单键)</param>
            <param name="_startPageIndex">起始页码(从1开始)</param>
            <param name="_pageSize">每页记录数据</param>
            <param name="_isGetRows">是否查询记录行数</param>
            <param name="_trans">事务对象</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.SelectNoPrimary(System.String,System.Int32,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection)">
            <summary>
            读取指定的SQL语句读取分页数据(连接----无主键)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_startPageIndex">起始页码(从1开始)</param>
            <param name="_pageSize">每页记录数据</param>
            <param name="_isGetRows">是否查询记录行数</param>	
            <param name="_objConn">连接</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.SelectNoPrimary(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Data.SqlClient.SqlTransaction)">
            <summary>
            读取指定的SQL语句读取分页数据(事务----无主键)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_startPageIndex">起始页码(从1开始)</param>
            <param name="_pageSize">每页记录数据</param>
            <param name="_isGetRows">是否查询记录行数</param>	
            <param name="_objConn">事务对象</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Insert(System.Data.DataRow,System.Data.SqlClient.SqlConnection)">
            <summary>
            插入一条记录( 记录行 + 连接 )
            </summary>
            <param name="_row">数据行</param>
            <param name="_objConn">连接对象</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Insert(System.Data.DataRow,System.Data.SqlClient.SqlTransaction)">
            <summary>
            插入一条记录( 记录行 + 连接 )
            </summary>
            <param name="_row">数据行</param>
            <param name="_trans">事务</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.InsertWithIdentity(System.Data.DataRow,System.Data.SqlClient.SqlConnection)">
            <summary>
            插入一条记录( 记录行 + 连接 + 自动ID )
            </summary>
            <param name="_row">数据行</param>
            <param name="_objConn">连接对象</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.InsertWithIdentity(System.Data.DataRow,System.Data.SqlClient.SqlTransaction)">
            <summary>
            插入一条记录( 记录行 + 连接 + 自动ID )
            </summary>
            <param name="_row">数据行</param>
            <param name="_trans">事务</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Insert(System.Data.DataRow,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            插入一条记录( 记录行 + 连接 + 映射关系 )
            </summary>
            <param name="_row">数据行</param>
            <param name="_asFieldsList">映射关系</param>
            <param name="_objConn">连接对象</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Insert(System.Data.DataRow,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            插入一条记录( 记录行 + 连接 + 映射关系 )
            </summary>
            <param name="_row">数据行</param>
            <param name="_asFieldsList">映射关系</param>
            <param name="_trans">事务</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.InsertWithIdentity(System.Data.DataRow,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            插入一条记录( 记录行 + 连接 + 自动ID + 映射关系 )
            </summary>
            <param name="_row">数据行</param>
            <param name="_asFieldsList">映射关系</param>
            <param name="_objConn">连接对象</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.InsertWithIdentity(System.Data.DataRow,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            插入一条记录( 记录行 + 连接 + 自动ID )
            </summary>
            <param name="_row">数据行</param>
            <param name="_asFieldsList">映射关系</param>
            <param name="_trans">事务</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Update(System.Data.DataRow,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            更新一条记录(记录行 + 连接 )
            </summary>
            <param name="_row">数据行</param>
            <param name="_objConn">连接对象</param>
            <param name="_whereStr">更新条件</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Update(System.Data.DataRow,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            更新一条记录(记录行 + 连接 )
            </summary>
            <param name="_row">数据行</param>
            <param name="_whereStr">更新条件</param>
            <param name="_trans">事务</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Update(System.Data.DataRow,System.Data.SqlClient.SqlConnection)">
            <summary>
            更新一条记录(记录行 + 连接 )
            </summary>
            <param name="_row">数据行</param>
            <param name="_whereStr">更新条件</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Update(System.Data.DataRow,System.Data.SqlClient.SqlTransaction)">
            <summary>
            更新一条记录(记录行 + 连接 )
            </summary>
            <param name="_row">数据行</param>
            <param name="_trans">事务</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Update(System.Data.DataRow,System.String,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            更新一条记录(记录行 + 连接 + 映射关系 )
            </summary>
            <param name="_row">数据行</param>
            <param name="_asFieldList">映射关系</param>
            <param name="_objConn">连接对象</param>
            <param name="_whereStr">更新条件</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Update(System.Data.DataRow,System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            更新一条记录(记录行 + 连接 + 映射关系 )
            </summary>
            <param name="_row">数据行</param>
            <param name="_asFieldList">映射关系</param>
            <param name="_whereStr">更新条件</param>
            <param name="_trans">事务</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Delete(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            删除记录(连接)
            </summary>
            <param name="_tableName">要删除的数据所在数据库表名</param>
            <param name="_objConn">连接对象</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Delete(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            删除记录(事务)
            </summary>
            <param name="_tableName">要删除的数据所在数据库表名</param>
            <param name="_trans">事务</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Delete(System.String,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            删除记录(条件 + 连接)
            </summary>
            <param name="_tableName">要删除的数据所在数据库表名</param>
            <param name="_whereStr">删除条件</param>
            <param name="_objConn">连接对象</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Delete(System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            删除记录(条件 + 事务)
            </summary>
            <param name="_tableName">要删除的数据所在数据库表名</param>
            <param name="_whereStr">删除条件</param>
            <param name="_trans">事务</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateReadDataAdapter(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            根据SQL语句读取DataAdapter(自动取得表名 + 连接)
            </summary>
            <param name="_selectSQL">SQL语句</param>
            <param name="_objConn">连接对象</param>
            <returns>数据读取DataAdapter</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateReadDataAdapter(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            根据SQL语句读取DataAdapter(自动取得表名 + 事务)
            </summary>
            <param name="_selectSQL">SQL语句</param>
            <param name="_trans">事务对象</param>
            <returns>数据读取DataAdapter</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateReadDataAdapter(System.String,System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            根据SQL语句读取DataAdapter(表名 + 连接)
            </summary>
            <param name="_selectSQL">SQL语句</param>
            <param name="_objConn">连接对象</param>
            <param name="_fillTableName">数据集中的表格名</param>
            <returns>数据读取DataAdapter</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateReadDataAdapter(System.String,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            根据SQL语句读取DataAdapter(表名 + 事务)
            </summary>
            <param name="_selectSQL">SQL语句</param>
            <param name="_trans">事务对象</param>
            <param name="_fillTableName">数据集中的表格名</param>
            <returns>数据读取DataAdapter</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateReadDataAdapter(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            根据SQL语句读取DataAdapter(表名 + 连接 + 事务)
            </summary>
            <param name="_selectSQL">SQL语句</param>
            <param name="_objConn">连接对象</param>
            <param name="_trans">事务</param>
            <param name="_fillTableName">数据集中的表格名</param>
            <returns>数据读取DataAdapter</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateUpdateDataAdapter(System.String,System.String,System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            根据SQL语句取得UpdateDataAdapter(刷新数据集)
            </summary>
            <param name="_dbTableName">数据库表格名</param>
            <param name="_dbFieldList">数据库字段列表</param>
            <param name="_objConn">连接对象</param>
            <param name="_refreshWhere">刷新条件</param>
            <returns>更新数据的DataAdapter</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateUpdateDataAdapter(System.String,System.String,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            根据SQL语句取得UpdateDataAdapter(刷新数据集)
            </summary>
            <param name="_dbTableName">数据库表格名</param>
            <param name="_dbFieldList">数据库字段列表</param>
            <param name="_trans">事务</param>
            <param name="_refreshWhere">刷新条件</param>
            <returns>更新数据的DataAdapter</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateUpdateDataAdapter(System.String,System.String,System.String,System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            根据SQL语句取得UpdateDataAdapter( 刷新数据集 + 映射关系 )
            </summary>
            <param name="_dbTableName">数据库表格名</param>
            <param name="_dtFieldList">内存表字段列表</param>
            <param name="_asFieldList">映射关系</param>
            <param name="_objConn">连接对象</param>
            <param name="_refreshWhere">刷新条件</param>
            <returns>更新数据的DataAdapter</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateUpdateDataAdapter(System.String,System.String,System.String,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            根据SQL语句取得UpdateDataAdapter( 刷新数据集 + 映射关系 )
            </summary>
            <param name="_dbTableName">数据库表格名</param>
            <param name="_dtFieldList">内存表字段列表</param>
            <param name="_asFieldList">映射关系</param>
            <param name="_trans">事务</param>
            <param name="_refreshWhere">刷新条件</param>
            <returns>更新数据的DataAdapter</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetRecNum(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            取得指定查询的记录数
            </summary>
            <param name="_sqlStr">查询语句</param>
            <param name="_objConn">连接对象</param>
            <returns>记录数</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetFieldList(System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            取得一个表的字段列表
            </summary>
            <param name="_dbTableName"></param>
            <param name="_objConn"></param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetFieldList(System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            取得一个表的字段列表(事务)
            </summary>
            <param name="_dbTableName">数据库表名</param>
            <param name="_trans">事务</param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetLastID(System.String,System.String,System.Data.SqlClient.SqlConnection)">
            <summary>
            取得数据表的最后一个自动ID(连接)
            </summary>
            <param name="_tableName">表格名</param>
            <param name="_identityColName">自动ID列名</param>
            <param name="_objConn">连接对象</param>
            <returns>最后一个自动ID</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetLastID(System.String,System.String,System.Data.SqlClient.SqlTransaction)">
            <summary>
            取得数据表的最后一个自动ID(事务)
            </summary>
            <param name="_tableName">表格名</param>
            <param name="_identityColName">自动ID列名</param>
            <param name="_trans">事务</param>
            <returns>最后一个自动ID</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetLastID(System.String,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            取得数据表的最后一个自动ID(私有)
            </summary>
            <param name="_tableName">表格名</param>
            <param name="_identityColName">自动ID列名</param>
            <param name="_objConn">连接对象</param>
            <param name="_trans">事务</param>
            <returns>最后一个自动ID</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetTableStructBySQL(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            取得指定查询的表结构( SQL )
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_objConn">连接对象</param>
            <param name="_trans">事务对象</param>
            <param name="_dtName">内存表名称</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.GetTableStruct(System.String,System.String,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            取得指定表结构( dtFieldList + asFieldList )
            </summary>
            <param name="_dbtableName">表格名</param>
            <param name="_dtFieldList">内存表字段列表</param>
            <param name="_asFieldList">映射关系</param>
            <param name="_objConn">连接对象</param>
            <param name="_trans">事务</param>
            <returns>数据表结构</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Select(System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            查询指定条件的数据返回数据集(连接+事务+填充名)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_objConn">连接对象</param>
            <param name="_fillTableName">DataTable中的表名</param>
            <returns>结果对象</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.SelectByPrimary(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            读取指定的SQL语句读取分页数据(连接+事务---主键无顺序)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_primaryName">主键名(仅支持单键)</param>
            <param name="_startPageIndex">起始页码(从1开始)</param>
            <param name="_pageSize">每页记录数据</param>
            <param name="_isGetRows">是否查询记录行数</param>
            <param name="_objConn">连接对象</param>
            <param name="_trans">事务</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.SelectByOrderPrimary(System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            读取指定的SQL语句读取分页数据(连接+事务---主键有顺序 )
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_primaryName">唯一键列名(仅支持单键)</param>
            <param name="_startPageIndex">起始页码(从1开始)</param>
            <param name="_pageSize">每页记录数据</param>
            <param name="_isGetRows">是否查询记录行数</param>
            <param name="_objConn">连接对象</param>
            <param name="_trans">事务</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.SelectNoPrimary(System.String,System.Int32,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            读取指定的SQL语句读取分页数据(连接+事务---无主键)
            </summary>
            <param name="_sqlStr">SQL语句</param>
            <param name="_startPageIndex">起始页码(从1开始)</param>
            <param name="_pageSize">每页记录数据</param>
            <param name="_isGetRows">是否查询记录行数</param>	
            <param name="_objConn">连接对象</param>
            <param name="_trans">事务</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.SelectByPrimary(System.String,System.String,System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            读取指定的SQL语句读取分页数据(对拆分后的SQL结构重组成分页查询)
            </summary>
            <param name="_primaryName">主键名</param>
            <param name="_dbFieldListStr">字段列表</param>
            <param name="_fromToWhereStr">from到where或order by之间的部分</param>
            <param name="_whereStr">where后的串</param>
            <param name="_orderByStr">order by之后的串</param>
            <param name="_startPageIndex">起始页</param>
            <param name="_pageSize">每页记录数</param>
            <param name="_isGetRows">是否查询行数</param>
            <param name="_objConn">连接对象</param>
            <param name="_trans">事务对象</param>
            <returns>返回结果</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Insert(System.Data.DataRow,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            插入一条记录( 记录行 + 连接 + 事务 )
            </summary>
            <param name="_row">要插入的数据行</param>
            <param name="_asFieldList">映射关系</param>
            <param name="_objConn">连接对象</param>
            <param name="_trans">事务</param>
            <param name="_appendCommand">附加SQL语句</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Update(System.Data.DataRow,System.String,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            更新一条记录(给定记录 + 默认连接)
            </summary>
            <param name="_row">要更新的数据行</param>
            <param name="_asFieldList">映射关系</param>
            <param name="_whereStr">更新条件</param>
            <param name="_objConn">连接对象</param>
            <param name="_trans">事务</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.Delete(System.String,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction)">
            <summary>
            删除记录(条件 + 连接)
            </summary>
            <param name="_tableName">要删除的数据所在数据库表名</param>
            <param name="_whereStr">删除条件</param>
            <param name="_objConn">连接对象</param>
            <param name="_trans">事务</param>
            <returns>SQLData类(承载执行结果数据)</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ComEntity.CreateUpdateDataAdapter(System.String,System.String,System.String,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.String)">
            <summary>
            根据一个SQL语句取得UpdateDataAdapter
            </summary>
            <param name="_selectSQL">SQL语句(必须符合能生成命令生成器的语法)</param>
            <param name="_dtFieldList">要更新的内存表映射关系</param>
            <param name="_asFieldList">字段对应列表</param>
            <param name="_objConn">连接对象</param>
            <param name="_trans">事务</param>
            <param name="_refreshWhere">刷新语句</param>
            <returns>返回DataAdapter</returns>
        </member>
        <!-- 对于成员“M:RealTime.Common.CommonClass.ComEntity.ConvertRowToAsList(System.Data.DataRow,System.String)”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“M:RealTime.Common.CommonClass.ComEntity.ConvertDtListToAsList(System.String,System.String)”忽略有格式错误的 XML 注释 -->
        <member name="M:RealTime.Common.CommonClass.ComEntity.ConvertAsFieldListToHashTable(System.String)">
            <summary>
            将数据字段对应表转换成Hashtable(以内存表字段为主键)
            </summary>
            <param name="_asFieldList">对照列表</param>
            <returns>返回对照表的hashTable结构</returns>
        </member>
        <member name="T:RealTime.Common.CommonClass.PaginationData">
            <summary>
            分页方法执行结果类
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.PaginationData.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.PaginationData.m_errMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.PaginationData.m_pirmaryName">
            <summary>
            主键名
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.PaginationData.m_recNum">
            <summary>
            记录数
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.PaginationData.m_currentPage">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.PaginationData.m_pageSize">
            <summary>
            每页记录数
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.PaginationData.m_returnTable">
            <summary>
            返回的数据表
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.PaginationData.m_returnDS">
            <summary>
            结果集
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.PaginationData.m_Tag">
            <summary>
            扩展标记
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.PaginationData.ErrMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.PaginationData.PrimaryName">
            <summary>
            查询主键
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.PaginationData.RecNum">
            <summary>
            记录数
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.PaginationData.CurrentPage">
            <summary>
            当前页码
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.PaginationData.PageSize">
            <summary>
            每页记录数
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.PaginationData.PageCount">
            <summary>
            总页数
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.PaginationData.ReturnRow">
            <summary>
            返回的数据行
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.PaginationData.ReturnTable">
            <summary>
            返回的数据表
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.PaginationData.ReturnDS">
            <summary>
            返回结果集
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.PaginationData.Tag">
            <summary>
            扩展标记
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.SQLData">
            <summary>
            SQL命令执行结果类
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.SQLData.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SQLData.m_errMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SQLData.m_returnValue">
            <summary>
            返回值
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SQLData.m_returnTable">
            <summary>
            返回的数据表
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SQLData.m_returnDS">
            <summary>
            返回的数据集
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SQLData.m_Tag">
            <summary>
            扩展标记
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.SQLData.ErrMessage">
            <summary>
            错误信息
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.SQLData.ReturnValue">
            <summary>
            返回的值
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.SQLData.ReturnRow">
            <summary>
            返回的数据行
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.SQLData.ReturnTable">
            <summary>
            返回的数据表
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.SQLData.ReturnDS">
            <summary>
            返回结果集
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.SQLData.Tag">
            <summary>
            扩展标记
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.CCryptoHandle">
            <summary>
            对称加密解密
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.CCryptoHandle.#ctor(System.String)">
            <summary>
            对称加密类的构造函数
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.CCryptoHandle.#ctor(System.String,System.String)">
            <summary>
            对称加密类的构造函数
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.CCryptoHandle.Key">
            <summary>
            密钥
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.CCryptoHandle.IV">
            <summary>
            初始向量IV
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.CCryptoHandle.GetLegalKey">
            <summary>
            获得密钥
            </summary>
            <returns>密钥</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.CCryptoHandle.GetLegalIV">
            <summary>
            获得初始向量IV
            </summary>
            <returns>初试向量IV</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.CCryptoHandle.Encrypt(System.String)">
            <summary>
            加密方法
            </summary>
            <param name="Source">待加密的串</param>
            <returns>经过加密的串</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.CCryptoHandle.Decrypt(System.String)">
            <summary>
            解密方法
            </summary>
            <param name="Source">待解密的串</param>
            <returns>经过解密的串</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.CCryptoHandle.Encrypt(System.Byte[])">
            <summary>
            加密方法byte[] to byte[]
            </summary>
            <param name="Source">待加密的byte数组</param>
            <returns>经过加密的byte数组</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.CCryptoHandle.Decrypt(System.Byte[])">
            <summary>
            解密方法byte[] to byte[]
            </summary>
            <param name="Source">待解密的byte数组</param>
            <returns>经过解密的byte数组</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.CCryptoHandle.Encrypt(System.String,System.String)">
            <summary>
            加密方法File to File
            </summary>
            <param name="inFileName">待加密文件的路径</param>
            <param name="outFileName">待加密后文件的输出路径</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.CCryptoHandle.Decrypt(System.String,System.String)">
            <summary>
            解密方法File to File
            </summary>
            <param name="inFileName">待解密文件的路径</param>
            <param name="outFileName">待解密后文件的输出路径</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarEntry">
            <summary>
            This class represents an entry in a Tar archive. It consists
            of the entry's header, as well as the entry's File. Entries
            can be instantiated in one of three ways, depending on how
            they are to be used.
            <p>
            TarEntries that are created from the header bytes read from
            an archive are instantiated with the TarEntry( byte[] )
            constructor. These entries will be used when extracting from
            or listing the contents of an archive. These entries have their
            header filled in using the header bytes. They also set the File
            to null, since they reference an archive entry not a file.</p>
            <p>
            TarEntries that are created from files that are to be written
            into an archive are instantiated with the CreateEntryFromFile(string)
            pseudo constructor. These entries have their header filled in using
            the File's information. They also keep a reference to the File
            for convenience when writing entries.</p>
            <p>
            Finally, TarEntries can be constructed from nothing but a name.
            This allows the programmer to construct the entry by hand, for
            instance when only an InputStream is available for writing to
            the archive, and the header information is constructed from
            other information. In this case the header fields are set to
            defaults and the File is set to null.</p>
            
            <see cref="P:ICSharpCode.SharpZipLib.Tar.TarEntry.TarHeader"/>
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarEntry.file">
            <summary>
            The name of the file this entry represents or null if the entry is not based on a file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarEntry.header">
            <summary>
            The entry's header information.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor">
            <summary>
            Only allow creation of Entries with the static CreateXYZ factory methods.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor(System.Byte[])">
            <summary>
            Construct an entry from an archive's header bytes. File is set
            to null.
            </summary>
            <param name = "headerBuf">
            The header bytes from a tar archive entry.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.#ctor(ICSharpCode.SharpZipLib.Tar.TarHeader)">
            <summary>
            Construct a TarEntry using the <paramref name="header">header</paramref> provided
            </summary>
            <param name="header">Header details for entry</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.Clone">
            <summary>
            Clone this tar entry.
            </summary>
            <returns>Returns a clone of this entry.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.CreateTarEntry(System.String)">
            <summary>
            Construct an entry with only a <paramref name="name"></paramref>.
            This allows the programmer to construct the entry's header "by hand". 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.CreateEntryFromFile(System.String)">
            <summary>
            Construct an entry for a file. File is set to file, and the
            header is constructed from information from the file.
            </summary>
            <param name = "fileName">
            The file that the entry represents.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.Initialize">
            <summary>
            Initialization code common to all pseudo constructors.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.Equals(System.Object)">
            <summary>
            Determine if the two entries are equal. Equality is determined
            by the header names being equal.
            </summary>
            <returns>
            True if the entries are equal.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetHashCode">
            <summary>
            Must be overridden when you override Equals.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.IsDescendent(ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Determine if the given entry is a descendant of this entry.
            Descendancy is determined by the name of the descendant
            starting with this entry's name.
            </summary>
            <param name = "desc">
            Entry to be checked as a descendent of this.
            </param>
            <returns>
            True if entry is a descendant of this.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.SetIds(System.Int32,System.Int32)">
            <summary>
            Convenience method to set this entry's group and user ids.
            </summary>
            <param name="userId">
            This entry's new user id.
            </param>
            <param name="groupId">
            This entry's new group id.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.SetNames(System.String,System.String)">
            <summary>
            Convenience method to set this entry's group and user names.
            </summary>
            <param name="userName">
            This entry's new user name.
            </param>
            <param name="groupName">
            This entry's new group name.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.AdjustEntryName(System.Byte[],System.String)">
            <summary>
            Convenience method that will modify an entry's name directly
            in place in an entry header buffer byte array.
            </summary>
            <param name="outbuf">
            The buffer containing the entry header to modify.
            </param>
            <param name="newName">
            The new name to place into the header buffer.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetFileTarHeader(ICSharpCode.SharpZipLib.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader with information from a File.
            </summary>
            <param name="hdr">
            The TarHeader to fill in.
            </param>
            <param name="file">
            The file from which to get the header information.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.GetDirectoryEntries">
            <summary>
            Get entries for all files present in this entries directory.
            If this entry doesnt represent a directory zero entries are returned.
            </summary>
            <returns>
            An array of TarEntry's for this entry's children.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.WriteEntryHeader(System.Byte[])">
            <summary>
            Write an entry's header information to a header buffer.
            </summary>
            <param name = "outbuf">
            The tar entry header buffer to fill in.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarEntry.NameTarHeader(ICSharpCode.SharpZipLib.Tar.TarHeader,System.String)">
            <summary>
            Fill in a TarHeader given only the entry's name.
            </summary>
            <param name="hdr">
            The TarHeader to fill in.
            </param>
            <param name="name">
            The tar entry name.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.TarHeader">
            <summary>
            Get this entry's header.
            </summary>
            <returns>
            This entry's TarHeader.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.Name">
            <summary>
            Get/Set this entry's name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.UserId">
            <summary>
            Get/set this entry's user id.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.GroupId">
            <summary>
            Get/set this entry's group id.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.UserName">
            <summary>
            Get/set this entry's user name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.GroupName">
            <summary>
            Get/set this entry's group name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.ModTime">
            <summary>
            Get/Set the modification time for this entry
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.File">
            <summary>
            Get this entry's file.
            </summary>
            <returns>
            This entry's file.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.Size">
            <summary>
            Get/set this entry's recorded file size.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarEntry.IsDirectory">
            <summary>
            Return true if this entry represents a directory, false otherwise
            </summary>
            <returns>
            True if this entry is a directory.
            </returns>
        </member>
        <!-- 对于成员“T:RealTime.Common.CommonClass.DBF.DBFHeader”忽略有格式错误的 XML 注释 -->
        <member name="M:RealTime.Common.CommonClass.DBF.DBFHeader.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBFHeader.ToBytes">
            <summary>
            转为字节
            </summary>
            <returns>字节</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBFHeader.Add(System.Int32,System.Int32,System.Byte[])">
            <summary>
            private Add to buf
            </summary>
            <param name="startPoint">开始点</param>
            <param name="length">长度</param>
            <param name="content">内容</param>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.DBFHeader.Version">
            <summary>
            00 Version
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.DBFHeader.Update">
            <summary>
            01-03 Update Date
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.DBFHeader.Records">
            <summary>
            04-07 Records
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.DBFHeader.HeaderBytes">
            <summary>
            08-09 Header Length
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.DBFHeader.RecordBytes">
            <summary>
            10-11 Number of bytes in record (16-bit number)
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.DBFHeader.HaveIndexOrMemo">
            <summary>
            28	Production index exists - 0x01 else 0x00 或是0x02表示有备注
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.DBFHeader.LanguageDriverId">
            <summary>
             29	dBaseIV language driver ID
            </summary>
        </member>
        <!-- 对于成员“T:RealTime.Common.CommonClass.DBF.DBFExport”忽略有格式错误的 XML 注释 -->
        <!-- 对于成员“T:RealTime.Common.CommonClass.IDataExport”忽略有格式错误的 XML 注释 -->
        <member name="M:RealTime.Common.CommonClass.IDataExport.Export">
            <summary>
            数据导出
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBFExport.#ctor(System.String,System.Data.DataTable,System.Data.DataTable)">
            <summary>
            构造函数
            </summary>
            <param name="_fileName">文件路径</param>
            <param name="_dtData">表格数据</param>
            <param name="_dtSchema">表格结构</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBFExport.Export">
            <summary>
            IDataExport 成员
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBFExport.GetColumnInfo(System.String)">
            <summary>
            取得列信息
            </summary>
            <param name="_FieldName">字段物理名</param>
            <returns>字段数据类</returns>
        </member>
        <member name="T:RealTime.Common.CommonClass.DBF.ColumnData">
            <summary>
            字段数据类
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.ColumnData.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.ColumnData.FieldName">
            <summary>
            字段物理名称(FieldName)
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.ColumnData.FieldCaption">
            <summary>
            字段中文名称(FieldCaption)
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.ColumnData.FieldType">
            <summary>
            索引字段类型(FieldType)
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.ColumnData.FieldLength">
            <summary>
            索引字段长度(FieldLength)
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.ColumnData.NumPrec">
            <summary>
            索引小数位数(NumPrec)
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.INameTransform">
            <summary>
            INameTransform defines how file system names are transformed for use with archives.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.INameTransform.TransformFile(System.String)">
            <summary>
            Given a file name determine the transformed equivalent.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.INameTransform.TransformDirectory(System.String)">
            <summary>
            Given a directory name determine the transformed equivalent.
            </summary>
            <param name="name">The name to transform.</param>
            <returns>The transformed directory name</returns>
        </member>
        <!-- 对于成员“T:RealTime.Common.CommonClass.ExplainExport”忽略有格式错误的 XML 注释 -->
        <member name="M:RealTime.Common.CommonClass.ExplainExport.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.ExplainExport.CreatWriter">
            <summary>
            创建数据流
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.ExplainExport.ExportDataToTxt(System.Data.DataTable)">
            <summary>
            导出文本内容
            </summary>
            <param name="_dt"></param>
            <param name="_TextLimite"></param>
            <param name="_RowCompart"></param>
            <param name="_ColCompart"></param>
            <param name="_StreamWrite"></param>
        </member>
        <member name="M:RealTime.Common.CommonClass.ExplainExport.CloseWriter">
            <summary>
            关闭流
            </summary>
            <param name="_StreamWrite"></param>
        </member>
        <member name="M:RealTime.Common.CommonClass.ExplainExport.Export(System.Data.DataTable,System.String)">
            <summary>
            创建数据流并导出头文件
            </summary>
        </member>
        <member name="T:GTA.SoftUpdate.Zip.ZipHandle">
            <summary>
            Zip 的摘要说明。
            考虑到让升级软件只有一个exe和一个config文件就能运行，所以把SharpZipLib的代码都直接引用进来了
            用的SharpZipLib是0.84.0.0版，相关信息可以查看SharpZipLib\AssemblyInfo.cs这个文件
            </summary>
        </member>
        <member name="M:GTA.SoftUpdate.Zip.ZipHandle.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:GTA.SoftUpdate.Zip.ZipHandle.ZipDir(System.String,System.String)">
            <summary>
            创建一个ZIP文件
            </summary>
            <param name="filename">压缩后的文件名</param>
            <param name="directory">压缩的目录</param> 
        </member>
        <member name="M:GTA.SoftUpdate.Zip.ZipHandle.UnzipDir(System.String,System.String)">
            <summary>
            解压缩一个ZIP文件为一个目录
            </summary>
            <param name="_Filename">解压的文件名</param>
            <param name="_Directory">解压后的目录</param>
            <returns>是否解压成功</returns>
        </member>
        <member name="M:GTA.SoftUpdate.Zip.ZipHandle.GetZipBytes(System.Byte[])">
            <summary>
            压缩字节流
            </summary>
            <param name="_unZipBytes"></param>
            <returns></returns>
        </member>
        <member name="M:GTA.SoftUpdate.Zip.ZipHandle.GetUnZipBytes(System.Byte[])">
            <summary>
            解压字节流
            </summary>
            <param name="_zipBytes"></param>
            <returns></returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream">
            <summary>
            An output stream that compresses into the BZip2 format 
            including file header chars into another stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the current position of this stream to the given value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.ReadByte">
            <summary>
            Read a byte from the stream advancing the position.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of bytes to the stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a default output stream with maximum block size
            </summary>
            <param name="stream">The stream to write BZip data onto.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Initialise a new instance of the <see cref="T:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream"></see> 
            for the specified stream, using the given blocksize.
            </summary>
            <param name="stream">The stream to write compressed data to.</param>
            <param name="blockSize">The block size to use.</param>
            <remarks>
            Valid block sizes are in the range 1..9, with 1 giving 
            the lowest compression and 9 the highest.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.WriteByte(System.Byte)">
            <summary>
            Write a byte to the stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Finalize">
            <summary>
            Free any resources and other cleanup before garbage collection reclaims memory
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Close">
            <summary>
            End the current block and end compression.
            Close the stream and free any resources
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Flush">
            <summary>
            Flush output buffers
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Length">
            <summary>
            Gets the length in bytes of the stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2OutputStream.Position">
            <summary>
            Gets or sets the current position of this stream.
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.GTASocketClientExceptionType">
            <summary>
            客户端Socket异常类型
            
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketClientExceptionType.SCETWasConnectedThenException">
            <summary>
            曾经连接上过服务器,连接中异常
            将触发断开连接事件
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketClientExceptionType.SCETWasntConnectedThenException">
            <summary>
            未连接上过服务器,初次连接异常
            一般为网络问题
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketClientExceptionType.SCETSocksProxyException">
            <summary>
            Socks 代理异常
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.GTASocketStatus">
            <summary>
            Socket通讯组件状态
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketStatus.SSIsResetting">
             <summary>
            Socket状态为正在重置
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketStatus.SSIsReseted">
            <summary>
            Socket状态为已经重置
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketStatus.SSIsReadyResset">
             <summary>
            Socket状态为 准备重置
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketStatus.SSIsManualStoped">
            <summary>
            Socket状态为手动停止
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketStatus.SSIsManualStarting">
            <summary>
            Socket状态为手动启动
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketStatus.SSIsNormal">
            <summary>
            Socket状态为标准的
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.GTASocketType">
            <summary>
            Socket通讯组件类型
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketType.STServer">
            <summary>
            仅服务器
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketType.STClient">
            <summary>
            仅客户端
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketType.STClientServer">
            <summary>
            既是服务器又是客户端
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketType.None">
            <summary>
            无
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.stkckMarketType">
            <summary>
            市场品种
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.stkckMarketType.HqExData">
            <summary>
            国内市场
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.stkckMarketType.HkStock">
            <summary>
            港股
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.stkckMarketType.MerFutData">
            <summary>
            商品期货
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.stkckMarketType.FutData">
            <summary>
            股指期货
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.SocketServiceStatus">
            <summary>
            SocketService 客户端状态
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SocketServiceStatus.SSSConnecting">
            <summary>
            连接中
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SocketServiceStatus.SSSConnected">
            <summary>
            已连接
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SocketServiceStatus.SSSException">
            <summary>
            连接异常
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SocketServiceStatus.SSSDisConnected">
            <summary>
            已断开
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SocketServiceStatus.SSSDisConnectedNeedReconnect">
            <summary>
            断开后需要重连
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SocketServiceStatus.SSSLogin">
            <summary>
            已成功
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SocketServiceStatus.SSSErrorUser">
            <summary>
            用户信息错误
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SocketServiceStatus.SSSResetCycleIsEnding">
            <summary>
            客户端结束一个可配置的次数的连接尝试周期（例如五次自动重连）
            这种情况应确定用户是否
            想开始一个新的连接尝试周期
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SocketServiceStatus.SSSSocksProxyError">
            <summary>
            Socks 代理错误
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.SubscribResponseType">
            <summary>
            订阅回复类型
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SubscribResponseType.SRTStock">
            <summary>
            现货
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SubscribResponseType.SRTStockPointFutures">
            <summary>
            股指期货
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SubscribResponseType.SRTMerchandiseFutures">
            <summary>
            商品期货
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SubscribResponseType.HKStock">
            <summary>
            港股
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.UdpDataType">
            <summary>
            对象类型
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpDataType.UDTEntity">
            <summary>
            实体
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpDataType.UDTEntityCollection">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.HKMsgType">
            <summary>
            港股Udp包数据包类型
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.HKMsgType.HKMTInit">
            <summary>
            盘前静态数据
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.HKMsgType.HKMTMarket">
            <summary>
            行情数据
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.HKMsgType.HKMTPriceInfo">
            <summary>
            盘前价格变动表
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.HKMsgType.HKMTStatus">
            <summary>
            证券交易状态
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.UdpMessageType">
            <summary>
            消息类型
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpMessageType.UMTInit">
            <summary>
            初始数据
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpMessageType.UMTMarket">
            <summary>
            行情数据
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpMessageType.UMTHeartJump">
            <summary>
            心跳包
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpMessageType.UMTMarketUpdateEnding">
            <summary>
            批更新结束通知
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpMessageType.UMTMarketUpdateStarting">
            <summary>
            更新通知
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.UdpPacketSource">
            <summary>
            数据来源类型
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpPacketSource.UPSShMarket">
            <summary>
            上海现货行情
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpPacketSource.UPSSzMarket">
            <summary>
            深圳现货行情
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpPacketSource.UPSStockPointFutures">
            <summary>
            股指期货行情
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpPacketSource.UPSDLMerFutures">
            <summary>
            大连商品期货行情
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpPacketSource.UPSZZMerFutures">
            <summary>
            郑州商品期货行情
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpPacketSource.UPSShMerFutures">
            <summary>
            上海商品期货行情
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.UdpPacketSource.UPSHKMarket">
            <summary>
            港股行情
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPLOGIN">
             <summary>
            用户登录请求 
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPHEART">
             <summary>
            心跳请求
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPCONNECTTEST">
             <summary>
            连接测试请求
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPGETALLCODE">
             <summary>
            请求所有股票代码
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPSUBSCRIBE">
             <summary>
            订阅行情
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPSUBSCRIBEQH">
             <summary>
            订阅期货
             </summary>
             
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPSUBSCRIBEMERQH">
             <summary>
            订阅商品期货
             </summary>
             
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPLOGOUT">
             <summary>
            用户退出
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPLOGINACK">
             <summary>
            用户登录回复
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPHEARTACK">
             <summary>
            心跳回复
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPCONNECTTESTACK">
             <summary>
            连接测试回复
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPGETALLCODEACK">
             <summary>
            请求所有股票代码回复
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPHQEXACK">
             <summary>
            行情信息回复
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPDISCONNECT">
             <summary>
            端开连接回复
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPQHDATAACK">
             <summary>
            期货信息回复
             </summary> 
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPSUBSCIBECOMPELETE">
             <summary>
            完整行情请求
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.MSGTYPE.TCPSUBSCIBECOMPELETEACK">
             <summary>
            完整行情回复
             </summary>
            
        </member>
        <member name="F:RealTime.Common.CommonClass.ENCODING.UTF8">
             <summary>
            utf8编码
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.ENCODING.GB">
             <summary>
            GB编码
             </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.ENCODING.BIG5">
             <summary>
            Big5编码
             </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.GTASocketRequestType">
            <summary>
            客户端请求类型
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketRequestType.SRTLogin">
            <summary>
            登陆请求
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketRequestType.SRTSubscibe">
            <summary>
            订阅请求
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketRequestType.SRTSubscibeCompelete">
            <summary>
            订阅全部的请求
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketRequestType.SRTTestConnection">
            <summary>
            测试与服务器是否仍保持连接的请求
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketRequestType.SRTGetAllCode">
            <summary>
            客户端需要重新获取所有代码列表
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.GTASocketResponseType">
            <summary>
            服务器端回复类型
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTLogin">
            <summary>
            登陆认证类型的回复
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTSubscibe">
            <summary>
            订阅现货类型的回复
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTSubscibeCompelete">
            <summary>
            订阅全部的现货请求的回复
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTSubscibeQhCompelete">
            <summary>
            订阅全部的商品期货请求的回复
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTSubscibeMerQhCompelete">
            <summary>
            订阅全部的商品期货请求的回复
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTSubscibeQh">
            <summary>
            期货
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTSubscibeMerQh">
            <summary>
            商品期货
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTTestConnection">
            <summary>
            连接测试回复
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTNeedGetAllCode">
            <summary>
            CODE列表有更新，客户端需要重新获取
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTAllCodeResponse">
            <summary>
            所有代码的回复
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTSubscibeHKCompelete">
            <summary>
            订阅全部的港股行情请求的回复
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTSubscibeHK">
            <summary>
            港股行情
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTSubscibeHKStockStatus">
            <summary>
            港股证券交易状态
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTSubscibeHKStatic">
            <summary>
            港股盘前静态数据
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.SRTSubscibeHKPreMinPrice">
            <summary>
            港股盘前价位变动
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.GTASocketResponseType.Error">
            <summary>
            出现异常时
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.BodyBuildType">
            <summary>
            包体打包类型    
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.BodyBuildType.BBTEntity">
            <summary>
            单实体
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.BodyBuildType.BBTEntityCollection">
            <summary>
            实体集合
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.ConfigFile">
            <summary>
            ConfigFile 的摘要说明。
            配制文件类
            修改者：秦利军
            修改时间：20091228
            修改内容：清除其中的数据库访问对象，使用统一访问方式
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigFile.GetKeyValue(System.String)">
            <summary>
            取得更新程序指定关键字的值
            </summary>
            <param name="_key">关键字</param>
            <returns>关键字的配置</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigFile.SetKeyValue(System.String,System.String)">
            <summary>
            设置更新程序配置文件指定关键字的值
            </summary>
            <param name="_key"></param>
            <param name="_value"></param>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigFile.RemoveKey(System.String)">
            <summary>
            删除更新程序配置文件指定关键字
            </summary>
            <param name="_key"></param>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigFile.GetKeyValue(System.String,System.String)">
            <summary>
            取得指定关键字的值
            </summary>
            <param name="_key">关键字</param>
            <returns>关键字的配置</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigFile.SetKeyValue(System.String,System.String,System.String)">
            <summary>
            设置配置文件指定关键字的值
            </summary>
            <param name="_key"></param>
            <param name="_value"></param>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigFile.RemoveKey(System.String,System.String)">
            <summary>
            删除配置文件指定关键字
            </summary>
            <param name="_key"></param>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigFile.GetIintDirectory">
            <summary>
            系统运行的初始目录
            </summary>
            <returns>取得系统运行初始目录</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigFile.GetData(System.String)">
            <summary>
            读取XML到DataTable
            </summary>
            <param name="_tableName">xml文件名</param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigFile.ReadXmlToTable(System.String)">
            <summary>
            读取XML到DataTable
            </summary>
            <param name="_tableName">xml文件名</param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigFile.ReadXmlToTableNoBin(System.String,System.String)">
            <summary>
            读取XML到DataTable(非bin目录下) 
            </summary>
            <param name="_tableName">xml文件名</param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigFile.WriteTableToXmlNoBin(System.Data.DataTable,System.String)">
            <summary>
            将DataTable写入到XML (非bin目录下) 
            </summary>
            <param name="_tableName">DataTable名</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigFile.WriteTableToXml(System.Data.DataTable)">
            <summary>
            将DataTable写入到XML
            </summary>
            <param name="_tableName">DataTable名</param>
        </member>
        <member name="T:RealTime.Server.CommonClass.CacheHelper">
            <summary>
            描述：缓存相关的操作类
            作者：段进雄
            日期：2008-12-1
            修改者：秦利军
            修改内容：去除对企业库的引用
            </summary>
        </member>
        <member name="M:RealTime.Server.CommonClass.CacheHelper.GetCache(System.String)">
            <summary>
            获取当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey">缓存关键字</param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Server.CommonClass.CacheHelper.Remove(System.String)">
            <summary>
            从应用程序的 Cache 对象移除指定项
            </summary>
            <param name="CacheKey">要移除的缓存项的 String 标识符</param>
        </member>
        <member name="M:RealTime.Server.CommonClass.CacheHelper.SetCache(System.String,System.Object)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey">缓存关键字</param>
            <param name="objObject">缓存对象</param>
        </member>
        <member name="M:RealTime.Server.CommonClass.CacheHelper.SetCache(System.String,System.Object,System.DateTime,System.TimeSpan)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey">缓存关键字</param>
            <param name="objObject">缓存对象</param>
            <param name="absoluteExpiration">绝对时间：所插入对象将过期并被从缓存中移除的时间。若要避免可能出现的本地时间方面的问题（如从标准时间更改为夏时制），请对此参数值使用 UtcNow，不要使用 Now。如果使用绝对过期，则 slidingExpiration 参数必须为 System.Web.Caching.Cache.NoSlidingExpiration。</param>
            <param name="slidingExpiration">滑动时间：最后一次访问所插入对象时与该对象过期时之间的时间间隔。如果该值等效于 20 分钟，则对象在最后一次被访问 20 分钟之后将过期并被从缓存中移除。如果使用可调过期，则 absoluteExpiration 参数必须为 System.Web.Caching.Cache.NoAbsoluteExpiration。</param>
        </member>
        <member name="M:RealTime.Server.CommonClass.CacheHelper.SetCache(System.String,System.Object,System.Web.Caching.CacheDependency,System.DateTime,System.TimeSpan,System.Web.Caching.CacheItemPriority,System.Web.Caching.CacheItemRemovedCallback)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey">缓存关键字</param>
            <param name="objObject">缓存对象</param>
            <param name="dependencies">该项的文件依赖项或缓存键依赖项。当任何依赖项更改时，该对象即无效，并从缓存中移除。如果没有依赖项，则此参数包含 nullNothingnullptrnull 引用（在 Visual Basic 中为 Nothing）。</param>
            <param name="absoluteExpiration">绝对时间：所插入对象将过期并被从缓存中移除的时间。若要避免可能出现的本地时间方面的问题（如从标准时间更改为夏时制），请对此参数值使用 UtcNow，不要使用 Now。如果使用绝对过期，则 slidingExpiration 参数必须为 System.Web.Caching.Cache.NoSlidingExpiration。</param>
            <param name="slidingExpiration">滑动时间：最后一次访问所插入对象时与该对象过期时之间的时间间隔。如果该值等效于 20 分钟，则对象在最后一次被访问 20 分钟之后将过期并被从缓存中移除。如果使用可调过期，则 absoluteExpiration 参数必须为 System.Web.Caching.Cache.NoAbsoluteExpiration。</param>
            <param name="priority">该对象相对于缓存中存储的其他项的成本，由 CacheItemPriority 枚举表示。该值由缓存在退出对象时使用；具有较低成本的对象在具有较高成本的对象之前被从缓存移除。</param>
            <param name="onRemoveCallback">在从缓存中移除对象时将调用的委托（如果提供）。当从缓存中删除应用程序的对象时，可使用它来通知应用程序。</param>
        </member>
        <member name="M:RealTime.Server.CommonClass.CacheHelper.CacheItemRemovedCallback(System.String,System.Object,System.Web.Caching.CacheItemRemovedReason)">
            <summary>
            从 Cache 移除缓存项时通知应用程序的回调方法
            </summary>
            <param name="key">从缓存中移除的键</param>
            <param name="value">枚举指定的、从缓存移除项的原因</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.ProgressMessageHandler">
            <summary>
            Used to advise clients of 'events' while processing archives
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarArchive">
            <summary>
            The TarArchive class implements the concept of a
            'Tape Archive'. A tar archive is a series of entries, each of
            which represents a file system object. Each entry in
            the archive consists of a header block followed by 0 or more data blocks.
            Directory entries consist only of the header block, and are followed by entries
            for the directory's contents. File entries consist of a
            header followed by the number of blocks needed to
            contain the file's contents. All entries are written on
            block boundaries. Blocks are 512 bytes long.
            
            TarArchives are instantiated in either read or write mode,
            based upon whether they are instantiated with an InputStream
            or an OutputStream. Once instantiated TarArchives read/write
            mode can not be changed.
            
            There is currently no support for random access to tar archives.
            However, it seems that subclassing TarArchive, and using the
            TarBuffer.getCurrentRecordNum() and TarBuffer.getCurrentBlockNum()
            methods, this would be rather trvial.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.OnProgressMessageEvent(ICSharpCode.SharpZipLib.Tar.TarEntry,System.String)">
            <summary>
            Raises the ProgressMessage event
            </summary>
            <param name="entry">TarEntry for this event</param>
            <param name="message">message for this event.  Null is no message</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.#ctor">
            <summary>
            Constructor for a TarArchive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream)">
            <summary>
            The InputStream based constructors create a TarArchive for the
            purposes of extracting or listing a tar archive. Thus, use
            these constructors when you wish to extract files from or list
            the contents of an existing tar archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateInputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create TarArchive for reading setting block factor
            </summary>
            <param name="inputStream">Stream for tar archive contents</param>
            <param name="blockFactor">The blocking factor to apply</param>
            <returns>
            TarArchive
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream)">
            <summary>
            Create a TarArchive for writing to, using the default blocking factor
            </summary>
            <param name="outputStream">Stream to write to</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CreateOutputTarArchive(System.IO.Stream,System.Int32)">
            <summary>
            Create a TarArchive for writing to
            </summary>
            <param name="outputStream">The stream to write to</param>
            <param name="blockFactor">The blocking factor to use for buffering.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.Initialize(System.Int32)">
            <summary>
            Common constructor initialization code.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetKeepOldFiles(System.Boolean)">
            <summary>
            Set the flag that determines whether existing files are
            kept, or overwritten during extraction.
            </summary>
            <param name="keepOldFiles">
            If true, do not overwrite existing files.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetAsciiTranslation(System.Boolean)">
            <summary>
            Set the ascii file translation flag. If ascii file translation
            is true, then the file is checked to see if it a binary file or not. 
            If the flag is true and the test indicates it is ascii text 
            file, it will be translated. The translation converts the local
            operating system's concept of line ends into the UNIX line end,
            '\n', which is the defacto standard for a TAR archive. This makes
            text files compatible with UNIX.
            </summary>
            <param name= "asciiTranslate">
            If true, translate ascii text files.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set user and group information that will be used to fill in the
            tar archive's entry headers. This information based on that available 
            for the linux operating system, which is not always available on other
            operating systems.  TarArchive allows the programmer to specify values
            to be used in their place.
            </summary>
            <param name="userId">
            The user id to use in the headers.
            </param>
            <param name="userName">
            The user name to use in the headers.
            </param>
            <param name="groupId">
            The group id to use in the headers.
            </param>
            <param name="groupName">
            The group name to use in the headers.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.CloseArchive">
            <summary>
            Close the archive. This simply calls the underlying
            tar stream's close() method.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ListContents">
            <summary>
            Perform the "list" command for the archive contents.
            
            NOTE That this method uses the <see cref="E:ICSharpCode.SharpZipLib.Tar.TarArchive.ProgressMessageEvent"> progress event</see> to actually list
            the contents. If the progress display event is not set, nothing will be listed!
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ExtractContents(System.String)">
            <summary>
            Perform the "extract" command and extract the contents of the archive.
            </summary>
            <param name="destDir">
            The destination directory into which to extract.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.ExtractEntry(System.String,ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Extract an entry from the archive. This method assumes that the
            tarIn stream has been properly set with a call to getNextEntry().
            </summary>
            <param name="destDir">
            The destination directory into which to extract.
            </param>
            <param name="entry">
            The TarEntry returned by tarIn.getNextEntry().
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.WriteEntry(ICSharpCode.SharpZipLib.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarArchive.InternalWriteEntry(ICSharpCode.SharpZipLib.Tar.TarEntry,System.Boolean)">
            <summary>
            Write an entry to the archive. This method will call the putNextEntry
            and then write the contents of the entry, and finally call closeEntry()
            for entries that are files. For directories, it will call putNextEntry(),
            and then, if the recurse flag is true, process each entry that is a
            child of the directory.
            </summary>
            <param name="sourceEntry">
            The TarEntry representing the entry to write to the archive.
            </param>
            <param name="recurse">
            If true, process the children of directory entries.
            </param>
        </member>
        <member name="E:ICSharpCode.SharpZipLib.Tar.TarArchive.ProgressMessageEvent">
            <summary>
            Client hook allowing detailed information to be reported during processing
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.PathPrefix">
            <summary>
            PathPrefix is added to entry names as they are written if the value is not null.
            A slash character is appended after PathPrefix 
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.RootPath">
            <summary>
            RootPath is removed from entry names if it is found at the
            beginning of the name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">
            <summary>
            Get or set a value indicating if overrides defined by <see cref="M:ICSharpCode.SharpZipLib.Tar.TarArchive.SetUserInfo(System.Int32,System.String,System.Int32,System.String)">SetUserInfo</see> should be applied.
            </summary>
            <remarks>If overrides are not applied then the values as set in each header will be used.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.UserId">
            <summary>
            Get the archive user id.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user id.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.UserName">
            <summary>
            Get the archive user name.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current user name.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.GroupId">
            <summary>
            Get the archive group id.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group id.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.GroupName">
            <summary>
            Get the archive group name.
            See <see cref="P:ICSharpCode.SharpZipLib.Tar.TarArchive.ApplyUserInfoOverrides">ApplyUserInfoOverrides</see> for detail
            on how to allow setting values on a per entry basis.
            </summary>
            <returns>
            The current group name.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarArchive.RecordSize">
            <summary>
            Get the archive's record size. Because of its history, tar
            supports the concept of buffered IO consisting of RECORDS of
            BLOCKS. This allowed tar to match the IO characteristics of
            the physical device being used. Of course, in the C# world,
            this makes no sense, WITH ONE EXCEPTION - archives are expected
            to be properly "blocked". Thus, all of the horrible TarBuffer
            support boils down to simply getting the "boundaries" correct.
            </summary>
            <returns>
            The record size this archive is using.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException">
            <summary>
            This exception is used to indicate that there is a problem
            with a TAR archive header.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor">
            <summary>
            Initialise a new instance of the InvalidHeaderException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.InvalidHeaderException.#ctor(System.String)">
            <summary>
            Initialises a new instance of the InvalidHeaderException class with a specified message.
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.LangueResource.resources">
            <summary>
            提供在运行时方便地访问区域性特定资源的途径。
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.LangueResource.GetString(System.String)">
            <summary>
            多语言提示语
            获取当前区域性的指定的 String 资源的值。 
            </summary>
            <param name="name">名称</param>
            <returns>资源文件相应的描述</returns>
        </member>
        <!-- 对于成员“T:RealTime.Common.CommonClass.DBF.DBFRow”忽略有格式错误的 XML 注释 -->
        <member name="M:RealTime.Common.CommonClass.DBF.DBFRow.#ctor(System.Int32,System.Collections.IList,RealTime.Common.CommonClass.DBF.FPTFile)">
            <summary>
            构造函数
            </summary>
            <param name="rowLength">长度</param>
            <param name="columns">字段列表</param>
            <param name="fpt">文件</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBFRow.ToBytes">
            <summary>
            转化为字节
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBFRow.Clear(System.Byte[])">
            <summary>
            清除内容为空格
            </summary>
            <param name="buf"></param>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.DBFRow.Item(System.Int32)">
            <summary>
            索引器
            </summary>
        </member>
        <!-- 对于成员“T:RealTime.Common.CommonClass.DBF.ConstVar”忽略有格式错误的 XML 注释 -->
        <member name="F:RealTime.Common.CommonClass.DBF.ConstVar.LANGUAGEDRIVERID">
            <summary>
            DBF语言版本
            Language Driver ID
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.ConstVar.FILEHEADERRECORDSSIZE">
            <summary>
            文件头的保留大小
            FILE HEADER RECORDS SIZE
            File Header Records size
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.ConstVar.FILEHEADENDFLAG">
            <summary>
            文件头结束标志
            FILE HEAD END FLAG
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.ConstVar.FILEIINFOSIZE">
            <summary>
            文件信息头的大小
            FILE IINFO SIZE
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.ConstVar.FIELD_DESCRIPT_LEN">
            <summary>
            字段描述长度
            FIELD_DESCRIPT_LEN
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.ConstVar.DBFVERSION">
            <summary>
            DBF 版本 此处为Foxpro的
            DBF VERSION
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.ConstVar.FILEENDCHAR">
            <summary>
            文件结束符
            FILE END CHAR
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.ConstVar.HAVEMEMOFILE">
            <summary>
            有备注文件标志，不考虑其它文件，如索引文件等
            HAVE MEMO FILE
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.ConstVar.COLUMNSDESCLENGTH">
            <summary>
            一个字段描述的大小
            COLUMNSDESCLENGTH
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.ConstVar.COLUMNNAMEMAXLENGTH">
            <summary>
            字段名称最大长度
            COLUMN NAME MAX LENGTH
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree">
            <summary>
            Huffman tree used for inflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defLitLenTree">
            <summary>
            Literal length tree
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.defDistTree">
            <summary>
            Distance tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.#ctor(System.Byte[])">
            <summary>
            Constructs a Huffman tree from the array of code lengths.
            </summary>
            <param name = "codeLengths">
            the array of code lengths
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.InflaterHuffmanTree.GetSymbol(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator)">
            <summary>
            Reads the next symbol from input.  The symbol is encoded using the
            huffman tree.
            </summary>
            <param name="input">
            input the input source.
            </param>
            <returns>
            the next symbol, or -1 if not enough input is available.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarHeader">
            <summary>
            This class encapsulates the Tar Entry Header used in Tar Archives.
            The class also holds a number of tar constants, used mostly in headers.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.CHKSUMOFS">
            <summary>
            Offset of checksum in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_OLDNORM">
            <summary>
             The "old way" of indicating a normal file.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_NORMAL">
            <summary>
            Normal file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_LINK">
            <summary>
            Link file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_SYMLINK">
            <summary>
            Symbolic link file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_CHR">
            <summary>
            Character device file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_BLK">
            <summary>
            Block device file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_DIR">
            <summary>
            Directory file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_FIFO">
            <summary>
            FIFO (pipe) file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_CONTIG">
            <summary>
            Contiguous file type.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GHDR">
            <summary>
            Posix.1 2001 global extended header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_ACL">
            <summary>
            Solaris access control list file type
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_DUMPDIR">
            <summary>
            GNU dir dump file type
            This is a dir entry that contains the names of files that were in the
            dir at the time the dump was made
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_EXTATTR">
            <summary>
            Solaris Extended Attribute File
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_META">
            <summary>
            Inode (metadata only) no file content
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_LONGLINK">
            <summary>
            Identifies the next file on the tape as having a long link name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_LONGNAME">
            <summary>
            Identifies the next file on the tape as having a long name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_MULTIVOL">
            <summary>
            Continuation of a file that began on another volume
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_NAMES">
            <summary>
            For storing filenames that dont fit in the main header (old GNU)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_SPARSE">
            <summary>
            GNU Sparse file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_GNU_VOLHDR">
            <summary>
            GNU Tape/volume header ignore on extraction
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.NAMELEN">
            <summary>
            The length of the name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MODELEN">
            <summary>
            The length of the mode field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.UIDLEN">
            <summary>
            The length of the user id field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GIDLEN">
            <summary>
            The length of the group id field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.CHKSUMLEN">
            <summary>
            The length of the checksum field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.SIZELEN">
            <summary>
            The length of the size field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MAGICLEN">
            <summary>
            The length of the magic field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.VERSIONLEN">
            <summary>
            The length of the version field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.MODTIMELEN">
            <summary>
            The length of the modification time field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.UNAMELEN">
            <summary>
            The length of the user name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GNAMELEN">
            <summary>
            The length of the group name field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.DEVLEN">
            <summary>
            The length of the devices field in a header buffer.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.LF_XHDR">
            <summary>
            Posix.1 2001 extended header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.TMAGIC">
            <summary>
            The magic tag representing a POSIX tar archive.  (includes trailing NULL)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarHeader.GNU_TMAGIC">
            <summary>
            The magic tag representing an old GNU tar archive where version is included in magic and overwrites it
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.#ctor">
            <summary>
            Initialise a default TarHeader instance
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.SetValueDefaults(System.Int32,System.String,System.Int32,System.String)">
            <summary>
            Set defaults for values used when constructing a TarHeader instance.
            </summary>
            <param name="userId">Value to apply as a default for userId.</param>
            <param name="userName">Value to apply as a default for userName.</param>
            <param name="groupId">Value to apply as a default for groupId.</param>
            <param name="groupName">Value to apply as a default for groupName.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ResetValueDefaults">
            <summary>
            Reset value defaults to initial values.
            </summary>
            <remarks>
            The default values are user id=0, group id=0, groupname="None", user name=null.
            When the default user name is null the value from Environment.UserName is used. Or "PocketPC" for the Compact framework.
            When the default group name is null the value "None" is used.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.Clone">
            <summary>
            Clone a TAR header.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetHashCode">
            <summary>
            Get a hash code for the current object.
            </summary>
            <returns>A hash code for the current object.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.Equals(System.Object)">
            <summary>
            Determines if this instance is equal to the specified object.
            </summary>
            <param name="obj">The object to compare with.</param>
            <returns>true if the objects are equal, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetName">
            <summary>
            Get the name of this entry.
            </summary>
            <returns>The entry's name.</returns>
            <remarks>
            This is obsolete use the Name property instead.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseOctal(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse an octal string from a header buffer.
            </summary>
            <param name = "header">The header buffer from which to parse.</param>
            <param name = "offset">The offset into the buffer from which to parse.</param>
            <param name = "length">The number of header bytes to parse.</param>
            <returns>The long equivalent of the octal string.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseName(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Parse a name from a header buffer.
            </summary>
            <param name="header">
            The header buffer from which to parse.
            </param>
            <param name="offset">
            The offset into the buffer from which to parse.
            </param>
            <param name="length">
            The number of header bytes to parse.
            </param>
            <returns>
            The name parsed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buf">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buf">buffer</paramref></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add <paramref name="name">name</paramref> to the buffer as a collection of bytes
            </summary>
            <param name="name">The name to add</param>
            <param name="nameOffset">The offset of the first character</param>
            <param name="buf">The buffer to add to</param>
            <param name="bufferOffset">The index of the first byte to add</param>
            <param name="length">The number of characters/bytes to add</param>
            <returns>The next free index in the <paramref name="buf">buffer</paramref></returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.Text.StringBuilder,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">
            The name to add
            </param>
            <param name="buf">
            The buffer to add to
            </param>
            <param name="offset">
            The offset into the buffer from which to start adding
            </param>
            <param name="length">
            The number of header bytes to add
            </param>
            <returns>
            The index of the next free byte in the buffer
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetNameBytes(System.String,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add an entry name to the buffer
            </summary>
            <param name="name">The name to add</param>
            <param name="buf">The buffer to add to</param>
            <param name="offset">The offset into the buffer from which to start adding</param>
            <param name="length">The number of header bytes to add</param>
            <returns>The index of the next free byte in the buffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetAsciiBytes(System.String,System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add a string to a buffer as a collection of ascii bytes.
            </summary>
            <param name="toAdd">The string to add</param>
            <param name="nameOffset">The offset of the first character to add.</param>
            <param name="buffer">The buffer to add to.</param>
            <param name="bufferOffset">The offset to start adding at.</param>
            <param name="length">The number of ascii characters to add.</param>
            <returns>The next free index in the buffer.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "val">
            the value to be converted to octal
            </param>
            <param name = "buf">
            buffer to store the octal string
            </param>
            <param name = "offset">
            The offset into the buffer where the value starts
            </param>
            <param name = "length">
            The length of the octal string to create
            </param>
            <returns>
            The offset of the character next byte after the octal string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetLongOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Put an octal representation of a value into a buffer
            </summary>
            <param name = "val">Value to be convert to octal</param>
            <param name = "buf">The buffer to update</param>
            <param name = "offset">The offset into the buffer to store the value</param>
            <param name = "length">The length of the octal string</param>
            <returns>Index of next byte</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.GetCheckSumOctalBytes(System.Int64,System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add the checksum integer to header buffer.
            </summary>
            <param name = "val"></param>
            <param name = "buf">The header buffer to set the checksum for</param>
            <param name = "offset">The offset into the buffer for the checksum</param>
            <param name = "length">The number of header bytes to update.
            It's formatted differently from the other fields: it has 6 digits, a
            null, then a space -- rather than digits, a space, then a null.
            The final space is already there, from checksumming
            </param>
            <returns>The modified buffer offset</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ComputeCheckSum(System.Byte[])">
            <summary>
            Compute the checksum for a tar entry header.  
            The checksum field must be all spaces prior to this happening
            </summary>
            <param name = "buf">The tar entry's header buffer.</param>
            <returns>The computed checksum.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.MakeCheckSum(System.Byte[])">
            <summary>
            Make a checksum for a tar entry ignoring the checksum contents.
            </summary>
            <param name = "buf">The tar entry's header buffer.</param>
            <returns>The checksum for the buffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ParseBuffer(System.Byte[])">
            <summary>
            Parse TarHeader information from a header buffer.
            </summary>
            <param name = "header">
            The tar entry header buffer to get information from.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarHeader.WriteHeader(System.Byte[])">
            <summary>
            'Write' header information to buffer provided, updating the <see cref="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Checksum">check sum</see>.
            </summary>
            <param name="outbuf">output buffer for header information</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Name">
            <summary>
            Get/set the name for this tar entry.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set the property to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Mode">
            <summary>
            Get/set the entry's Unix style permission mode.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.UserId">
            <summary>
            The entry's user id.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            The default is zero.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.GroupId">
            <summary>
            Get/set the entry's group id.
            </summary>
            <remarks>
            This is only directly relevant to linux/unix systems.
            The default value is zero.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Size">
            <summary>
            Get/set the entry's size.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the size to less than zero.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.ModTime">
            <summary>
            Get/set the entry's modification time.
            </summary>
            <remarks>
            The modification time is only accurate to within a second.
            </remarks>
            <exception cref="T:System.ArgumentOutOfRangeException">Thrown when setting the date time to less than 1/1/1970.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Checksum">
            <summary>
            Get the entry's checksum.  This is only valid/updated after writing or reading an entry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.IsChecksumValid">
            <summary>
            Get value of true if the header checksum is valid, false otherwise.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.TypeFlag">
            <summary>
            Get/set the entry's type flag.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.LinkName">
            <summary>
            The entry's link name.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set LinkName to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Magic">
            <summary>
            Get/set the entry's magic tag.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Magic to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.Version">
            <summary>
            The entry's version.
            </summary>
            <exception cref="T:System.ArgumentNullException">Thrown when attempting to set Version to null.</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.UserName">
            <summary>
            The entry's user name.
            </summary>
            <remarks>
            See <see cref="M:ICSharpCode.SharpZipLib.Tar.TarHeader.ResetValueDefaults">ResetValueDefaults</see>
            for detail on how this value is derived.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.GroupName">
            <summary>
            Get/set the entry's group name.
            </summary>
            <remarks>
            This is only directly relevant to unix systems.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.DevMajor">
            <summary>
            Get/set the entry's major device number.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarHeader.DevMinor">
            <summary>
            Get/set the entry's minor device number.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarBuffer">
            <summary>
            The TarBuffer class implements the tar archive concept
            of a buffered input stream. This concept goes back to the
            days of blocked tape drives and special io devices. In the
            C# universe, the only real function that this class
            performs is to ensure that files have the correct "record"
            size, or other tars will complain.
            <p>
            You should never have a need to access this class directly.
            TarBuffers are created by Tar IO Streams.
            </p>
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockSize">
            <summary>
            The size of a block in a tar archive in bytes.
            </summary>
            <remarks>This is 512 bytes.</remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.DefaultBlockFactor">
            <summary>
            The number of blocks in a default record.
            </summary>
            <remarks>
            The default value is 20 block per record.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarBuffer.DefaultRecordSize">
            <summary>
            The size in bytes of a default record.
            </summary>
            <remarks>
            The default size is 10KB.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.#ctor">
            <summary>
            Construct a default TarBuffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream)">
            <summary>
            Create TarBuffer for reading with default BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateInputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for reading inputStream setting BlockFactor
            </summary>
            <param name="inputStream">Stream to buffer</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream)">
            <summary>
            Construct TarBuffer for writing with default BlockFactor
            </summary>
            <param name="outputStream">output stream for buffer</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.CreateOutputTarBuffer(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarBuffer for writing Tar output to streams.
            </summary>
            <param name="outputStream">Output stream to write to.</param>
            <param name="blockFactor">Blocking factor to apply</param>
            <returns>TarBuffer</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Initialize(System.Int32)">
            <summary>
            Initialization common to all constructors.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetBlockFactor">
            <summary>
            Get the TAR Buffer's block factor
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetRecordSize">
            <summary>
            Get the TAR Buffer's record size.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.IsEOFBlock(System.Byte[])">
            <summary>
            Determine if an archive block indicates End of Archive. End of
            archive is indicated by a block that consists entirely of null bytes.
            All remaining blocks for the record should also be null's
            However some older tars only do a couple of null blocks (Old GNU tar for one)
            and also partial records
            </summary>
            <param name = "block">The data block to check.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.SkipBlock">
            <summary>
            Skip over a block on the input stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.ReadBlock">
            <summary>
            Read a block from the input stream.
            </summary>
            <returns>
            The block of data read.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.ReadRecord">
            <summary>
            Read a record from data stream.
            </summary>
            <returns>
            false if End-Of-File, else true.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentBlockNum">
            <summary>
            Get the current block number, within the current record, zero based.
            </summary>
            <returns>
            The current zero based block number.
            </returns>
            <remarks>
            The absolute block number = (<see cref="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentRecordNum">record number</see> * <see cref="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor">block factor</see>) + <see cref="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentBlockNum">block number</see>.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.GetCurrentRecordNum">
            <summary>
            Get the current record number.
            </summary>
            <returns>
            The current zero based record number.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteBlock(System.Byte[])">
            <summary>
            Write a block of data to the archive.
            </summary>
            <param name="block">
            The data to write to the archive.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteBlock(System.Byte[],System.Int32)">
            <summary>
            Write an archive record to the archive, where the record may be
            inside of a larger array buffer. The buffer must be "offset plus
            record size" long.
            </summary>
            <param name="buf">
            The buffer containing the record data to write.
            </param>
            <param name="offset">
            The offset of the record data within buf.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.WriteRecord">
            <summary>
            Write a TarBuffer record to the archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Flush">
            <summary>
            Flush the current data block if it has any data in it.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarBuffer.Close">
            <summary>
            Close the TarBuffer. If this is an output buffer, also flush the
            current block before closing.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.RecordSize">
            <summary>
            Get the record size for this buffer
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarBuffer.BlockFactor">
            <summary>
            Get the Blocking factor for the buffer
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.NameFilter">
            <summary>
            NameFilter is a string matching class which allows for both positive and negative
            matching.
            A filter is a sequence of independant <see cref="T:System.Text.RegularExpressions.Regex"></see> regular expressions separated by semi-colons ';'
            Each expression can be prefixed by a plus '+' sign or a minus '-' sign to denote the expression
            is intended to include or exclude names.  If neither a plus or minus sign is found include is the default
            A given name is tested for inclusion before checking exclusions.  Only names matching an include spec 
            and not matching an exclude spec are deemed to match the filter.
            An empty filter matches any name.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.#ctor(System.String)">
            <summary>
            Construct an instance based on the filter expression passed
            </summary>
            <param name="filter">The filter expression.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsValidExpression(System.String)">
            <summary>
            Test a string to see if it is a valid regular expression.
            </summary>
            <param name="e">The expression to test.</param>
            <returns>True if expression is a valid <see cref="T:System.Text.RegularExpressions.Regex"/> false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsValidFilterExpression(System.String)">
            <summary>
            Test an expression to see if it is valid as a filter.
            </summary>
            <param name="toTest">The filter expression to test.</param>
            <returns>True if the expression is valid, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.ToString">
            <summary>
            Convert this filter to its string equivalent.
            </summary>
            <returns>The string equivalent for this filter.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsIncluded(System.String)">
            <summary>
            Test a value to see if it is included by the filter.
            </summary>
            <param name="testValue">The value to test.</param>
            <returns>True if the value is included, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsExcluded(System.String)">
            <summary>
            Test a value to see if it is excluded by the filter.
            </summary>
            <param name="testValue">The value to test.</param>
            <returns>True if the value is excluded, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.IsMatch(System.String)">
            <summary>
            Test a value to see if it matches the filter.
            </summary>
            <param name="testValue">The value to test.</param>
            <returns>True if the value matches, false otherwise.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameFilter.Compile">
            <summary>
            Compile this filter.
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.Log.LogHelper">
            <summary>
            日志入口
            提供LogHandle中的记录日志的所有功能，最终调用logger类去写日志
            作者：蒋小华
            日期：2009-7-28
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHelper.Log(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="_Message">日志信息</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHelper.Log(System.String,RealTime.Common.CommonClass.Log.LogHandle.LogType)">
            <summary>
            记录日志
            </summary>
            <param name="_Message">日志信息</param>
            <param name="_LogType">类型</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHelper.LogDebug(System.String)">
            <summary>
            记录调试信息
            </summary>
            <param name="_Message"></param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHelper.Log(System.Int32,System.String,RealTime.Common.CommonClass.Log.LogHandle.LogType,System.DateTime,System.DateTime)">
            <summary>
            记录日志
            </summary>
            <param name="_ThreadID">线程名</param>
            <param name="_FunctionName">函数名</param>
            <param name="_LogType">日志类型</param>
            <param name="_StartTime">开始时间</param>
            <param name="_EndTime">结束时间</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHelper.LogError(System.String)">
            <summary>
            日志异常类
            </summary>
            <param name="_Message">日志信息</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHelper.LogError(System.String,System.String,System.Exception)">
            <summary>
            日志异常类
            </summary>
            <param name="_Class">类名（带命名空间）</param>
            <param name="_Function">方法名</param>
            <param name="_ex">异常类</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHelper.LogError(System.String,System.String,System.String,System.String)">
            <summary>
            日志异常类
            </summary>
            <param name="_Class">类名（带命名空间）</param>
            <param name="_Function">方法名</param>
            <param name="_Message">当前异常的消息</param>
            <param name="_StackTrace">当前异常发生时堆栈上的帧的字符串表m示形式</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHelper.LogInformation(System.String)">
            <summary>
            日志信息类
            </summary>
            <param name="_Message">日志信息</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHelper.LogInformation(System.Int32,System.String,System.DateTime,System.DateTime)">
            <summary>
            日志信息类
            </summary>
            <param name="_Message">日志信息</param>
        </member>
        <!-- 对于成员“T:RealTime.Common.CommonClass.DBF.DBFColumns”忽略有格式错误的 XML 注释 -->
        <member name="M:RealTime.Common.CommonClass.DBF.DBFColumns.#ctor(System.String,RealTime.Common.CommonClass.DBF.DBFDataType,System.Byte,System.Byte)">
            <summary>
            构造函数
            </summary>
            <param name="name">字段名</param>
            <param name="type">字段类型</param>
            <param name="length">字段长度</param>
            <param name="plc">小数点位数</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBFColumns.ToBytes">
            <summary>
            转为字节
            </summary>
            <returns></returns>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.DBFColumns.FieldName">
            <summary>
            字段名，英文10个字母汉字5个
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.DBFColumns.DataType">
            <summary>
            字段类型
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.DBFColumns.DataLength">
            <summary>
            字段长度
            </summary>
        </member>
        <member name="P:RealTime.Common.CommonClass.DBF.DBFColumns.DecimalPlc">
            <summary>
            小数点位数
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            <summary>
            Represents errors specific to Zip file handling
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor">
            <summary>
            Initializes a new instance of the ZipException class.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipException.#ctor(System.String)">
            <summary>
            Initializes a new instance of the ZipException class with a specified error message.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">
            <summary>
            This class represents an entry in a zip archive.  This can be a file
            or a directory
            ZipFile and ZipInputStream will give you instances of this class as 
            information about the members in an archive.  ZipOutputStream
            uses an instance of this class when creating an entry in a Zip file.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String)">
            <summary>
            Creates a zip entry with the given name.
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32)">
            <summary>
            Creates a zip entry with the given name and version required to extract
            </summary>
            <param name="name">
            The name for this entry. Can include directory components.
            The convention for names is 'unix'  style paths with no device names and 
            path elements separated by '/' characters.  This is not enforced see <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">CleanName</see>
            on how to ensure names are valid if this is desired.
            </param>
            <param name="versionRequiredToExtract">
            The minimum 'feature version' required this entry
            </param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(System.String,System.Int32,System.Int32)">
            <summary>
            Initializes an entry with the given name and made by information
            </summary>
            <param name="name">Name for this entry</param>
            <param name="madeByInfo">Version and HostSystem Information</param>
            <param name="versionRequiredToExtract">Minimum required zip feature version required to extract this entry</param>
            <exception cref="T:System.ArgumentNullException">
            The name passed is null
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            versionRequiredToExtract should be 0 (auto-calculate) or &gt; 10
            </exception>
            <remarks>
            This constructor is used by the ZipFile class when reading from the central header
            It is not generally useful, use the constructor specifying the name only.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.#ctor(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates a copy of the given zip entry.
            </summary>
            <param name="e">
            The entry to copy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            </summary>
            <param name="name">Name to clean</param>
            <param name="relativePath">Make names relative if true or absolute if false</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String)">
            <summary>
            Cleans a name making it conform to Zip file conventions.
            Devices names ('c:\') and UNC share names ('\\server\share') are removed
            and forward slashes ('\') are converted to back slashes ('/').
            Names are made relative by trimming leading slashes which is compatible
            with Windows-XPs built in Zip file handling.
            </summary>
            <param name="name">Name to clean</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.Clone">
            <summary>
            Creates a copy of this zip entry.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.ToString">
            <summary>
            Gets the string representation of this ZipEntry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsCrypted">
            <summary>
            Get/Set flag indicating if entry is encrypted.
            A simple helper routine to aid interpretation of <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">flags</see>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Flags">
            <summary>
            Get/Set general purpose bit flag for entry
            </summary>
            <remarks>
            General purpose bit flag<br/>
            Bit 0: If set, indicates the file is encrypted<br/>
            Bit 1-2 Only used for compression type 6 Imploding, and 8, 9 deflating<br/>
            Imploding:<br/>
            Bit 1 if set indicates an 8K sliding dictionary was used.  If clear a 4k dictionary was used<br/>
            Bit 2 if set indicates 3 Shannon-Fanno trees were used to encode the sliding dictionary, 2 otherwise<br/>
            <br/>
            Deflating:<br/>
              Bit 2    Bit 1<br/>
                0        0       Normal compression was used<br/>
                0        1       Maximum compression was used<br/>
                1        0       Fast compression was used<br/>
                1        1       Super fast compression was used<br/>
            <br/>
            Bit 3: If set, the fields crc-32, compressed size
            and uncompressed size are were not able to be written during zip file creation
            The correct values are held in a data descriptor immediately following the compressed data. <br/>
            Bit 4: Reserved for use by PKZIP for enhanced deflating<br/>
            Bit 5: If set indicates the file contains compressed patch data<br/>
            Bit 6: If set indicates strong encryption was used.<br/>
            Bit 7-15: Unused or reserved<br/>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ZipFileIndex">
            <summary>
            Get/Set index of this entry in Zip file
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Offset">
            <summary>
            Get/set offset for use in central header
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">
            <summary>
            Get/Set external file attributes as an integer.
            The values of this are operating system dependant see
            <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">HostSystem</see> for details
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.VersionMadeBy">
            <summary>
            Get the version made by for this entry or zero if unknown.
            The value / 10 indicates the major version number, and 
            the value mod 10 is the minor version number
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.HostSystem">
            <summary>
            Gets the compatability information for the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExternalFileAttributes">external file attribute</see>
            If the external file attributes are compatible with MS-DOS and can be read
            by PKZIP for DOS version 2.04g then this value will be zero.  Otherwise the value
            will be non-zero and identify the host system on which the attributes are compatible.
            </summary>
            		
            <remarks>
            The values for this as defined in the Zip File format and by others are shown below.  The values are somewhat
            misleading in some cases as they are not all used as shown.  You should consult the relevant documentation
            to obtain up to date and correct information.  The modified appnote by the infozip group is
            particularly helpful as it documents a lot of peculiarities.  The document is however a little dated.
            <list type="table">
            <item>0 - MS-DOS and OS/2 (FAT / VFAT / FAT32 file systems)</item>
            <item>1 - Amiga</item>
            <item>2 - OpenVMS</item>
            <item>3 - Unix</item>
            <item>4 - VM/CMS</item>
            <item>5 - Atari ST</item>
            <item>6 - OS/2 HPFS</item>
            <item>7 - Macintosh</item>
            <item>8 - Z-System</item>
            <item>9 - CP/M</item>
            <item>10 - Windows NTFS</item>
            <item>11 - MVS (OS/390 - Z/OS)</item>
            <item>12 - VSE</item>
            <item>13 - Acorn Risc</item>
            <item>14 - VFAT</item>
            <item>15 - Alternate MVS</item>
            <item>16 - BeOS</item>
            <item>17 - Tandem</item>
            <item>18 - OS/400</item>
            <item>19 - OS/X (Darwin)</item>
            <item>99 - WinZip AES</item>
            <item>remainder - unused</item>
            </list>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">
            <summary>
            Get minimum Zip feature version required to extract this entry
            </summary>		
            <remarks>
            Minimum features are defined as:<br/>
            1.0 - Default value<br/>
            1.1 - File is a volume label<br/>
            2.0 - File is a folder/directory<br/>
            2.0 - File is compressed using Deflate compression<br/>
            2.0 - File is encrypted using traditional encryption<br/>
            2.1 - File is compressed using Deflate64<br/>
            2.5 - File is compressed using PKWARE DCL Implode<br/>
            2.7 - File is a patch data set<br/>
            4.5 - File uses Zip64 format extensions<br/>
            4.6 - File is compressed using BZIP2 compression<br/>
            5.0 - File is encrypted using DES<br/>
            5.0 - File is encrypted using 3DES<br/>
            5.0 - File is encrypted using original RC2 encryption<br/>
            5.0 - File is encrypted using RC4 encryption<br/>
            5.1 - File is encrypted using AES encryption<br/>
            5.1 - File is encrypted using corrected RC2 encryption<br/>
            5.1 - File is encrypted using corrected RC2-64 encryption<br/>
            6.1 - File is encrypted using non-OAEP key wrapping<br/>
            6.2 - Central directory encryption (not confirmed yet)<br/>
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.RequiresZip64">
            <summary>
            Gets a value indicating if the entry requires Zip64 extensions to be stored
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DosTime">
            <summary>
            Get/Set DosTime
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.DateTime">
            <summary>
            Gets/Sets the time of last modification of the entry.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Name">
            <summary>
            Returns the entry name.  The path components in the entry should
            always separated by slashes ('/').  Dos device names like C: should also
            be removed.  See <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipEntry.CleanName(System.String,System.Boolean)">CleanName</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Size">
            <summary>
            Gets/Sets the size of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If the size is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The size or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressedSize">
            <summary>
            Gets/Sets the size of the compressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Size is not in the range 0..0xffffffff
            </exception>
            <returns>
            The size or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Crc">
            <summary>
            Gets/Sets the crc of the uncompressed data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Crc is not in the range 0..0xffffffffL
            </exception>
            <returns>
            The crc value or -1 if unknown.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.CompressionMethod">
            <summary>
            Gets/Sets the compression method. Only Deflated and Stored are supported.
            </summary>
            <returns>
            The compression method for this entry
            </returns>
            <see cref="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated"/>
            <see cref="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored"/>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.ExtraData">
            <summary>
            Gets/Sets the extra data.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Extra data is longer than 0xffff bytes.
            </exception>
            <returns>
            Extra data or null if not set.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Comment">
            <summary>
            Gets/Sets the entry comment.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If comment is longer than 0xffff.
            </exception>
            <returns>
            The comment or null if not set.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsDirectory">
            <summary>
            Gets a value indicating of the if the entry is a directory.  A directory is determined by
            an entry name with a trailing slash '/'.  The external file attributes
            can also mark a file as a directory.  The trailing slash convention should always be followed
            however.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.IsFile">
            <summary>
            Get a value of true if the entry appears to be a file; false otherwise
            </summary>
            <remarks>
            This only takes account Windows attributes.  Other operating systems are ignored.
            For linux and others the result may be incorrect.
            </remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow">
            <summary>
            Contains the output from the Inflation process.
            We need to have a window so that we can refer backwards into the output stream
            to repeat stuff.<br/>
            Author of the original java version : John Leuner
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Write(System.Int32)">
            <summary>
            Write a byte to this output window
            </summary>
            <param name="abyte">value to write</param>
            <exception cref="T:System.InvalidOperationException">
            if window is full
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Repeat(System.Int32,System.Int32)">
            <summary>
            Append a byte pattern already in the window itself
            </summary>
            <param name="len">length of pattern to copy</param>
            <param name="dist">distance from end of window pattern occurs</param>
            <exception cref="T:System.InvalidOperationException">
            If the repeated data overflows the window
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyStored(ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator,System.Int32)">
            <summary>
            Copy from input manipulator to internal window
            </summary>
            <param name="input">source of data</param>
            <param name="len">length of data to copy</param>
            <returns>the number of bytes copied</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyDict(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy dictionary to window
            </summary>
            <param name="dict">source dictionary</param>
            <param name="offset">offset of start in source dictionary</param>
            <param name="len">length of dictionary</param>
            <exception cref="T:System.InvalidOperationException">
            If window isnt empty
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetFreeSpace">
            <summary>
            Get remaining unfilled space in window
            </summary>
            <returns>Number of bytes left in window</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">
            <summary>
            Get bytes available for output in window
            </summary>
            <returns>Number of bytes filled</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.CopyOutput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copy contents of window to output
            </summary>
            <param name="output">buffer to copy to</param>
            <param name="offset">offset to start at</param>
            <param name="len">number of bytes to count</param>
            <returns>The number of bytes copied</returns>
            <exception cref="T:System.InvalidOperationException">
            If a window underflow occurs
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.Reset">
            <summary>
            Reset by clearing window so <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.OutputWindow.GetAvailable">GetAvailable</see> returns 0
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipException">
            <summary>
            GZipException represents a Gzip specific exception	
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor">
            <summary>
            Initialise a new instance of GZipException
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipException.#ctor(System.String)">
            <summary>
            Initialise a new instance of GZipException with its message string.
            </summary>
            <param name="message">A <see cref="T:System.String"></see>string that describes the error.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZipEvents">
            <summary>
            FastZipEvents supports all events applicable to <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip">FastZip</see> operations.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessDirectory">
            <summary>
            Delegate to invoke when processing directories.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.ProcessFile">
            <summary>
            Delegate to invoke when processing files.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.DirectoryFailure">
            <summary>
            Delegate to invoke when processing directory failures.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZipEvents.FileFailure">
            <summary>
            Delegate to invoke when processing file failures.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the directory failure event.
            </summary>
            <param name="directory">The directory.</param>
            <param name="e">The exception for this event.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raises the file failure event.
            </summary>
            <param name="file">The file for this event.</param>
            <param name="e">The exception for this event.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnProcessFile(System.String)">
            <summary>
            Raises the ProcessFileEvent.
            </summary>
            <param name="file">The file for this event.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZipEvents.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Raises the ProcessDirectoryEvent.
            </summary>
            <param name="directory">The directory for this event.</param>
            <param name="hasMatchingFiles">Flag indicating if directory has matching files as determined by the current filter.</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZip">
            <summary>
            FastZip provides facilities for creating and extracting zip files.
            Only relative paths are supported.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.#ctor">
            <summary>
            Initialize a default instance of FastZip.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.#ctor(ICSharpCode.SharpZipLib.Zip.FastZipEvents)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip"/>
            </summary>
            <param name="events"></param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String,System.String)">
            <summary>
            Create a zip file.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to source files from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The file filter to apply.</param>
            <param name="directoryFilter">The directory filter to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.CreateZip(System.String,System.String,System.Boolean,System.String)">
            <summary>
            Create a zip file/archive.
            </summary>
            <param name="zipFileName">The name of the zip file to create.</param>
            <param name="sourceDirectory">The directory to obtain files and directories from.</param>
            <param name="recurse">True to recurse directories, false for no recursion.</param>
            <param name="fileFilter">The file filter to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,System.String)">
            <summary>
            Extract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="fileFilter">A filter to apply to files.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.FastZip.ExtractZip(System.String,System.String,ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite,ICSharpCode.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate,System.String,System.String)">
            <summary>
            Exatract the contents of a zip file.
            </summary>
            <param name="zipFileName">The zip file to extract from.</param>
            <param name="targetDirectory">The directory to save extracted information in.</param>
            <param name="overwrite">The style of <see cref="T:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite">overwriting</see> to apply.</param>
            <param name="confirmDelegate">A delegate to invoke when confirming overwriting.</param>
            <param name="fileFilter">A filter to apply to files.</param>
            <param name="directoryFilter">A filter to apply to directories.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.CreateEmptyDirectories">
            <summary>
            Get/set a value indicating wether empty directories should be created.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.FastZip.NameTransform">
            <summary>
            Get or set the <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"> active when creating Zip files.</see>
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite">
            <summary>
            Defines the desired handling when overwriting files.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Prompt">
            <summary>
            Prompt the user to confirm overwriting
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Never">
            <summary>
            Never overwrite files.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.FastZip.Overwrite.Always">
            <summary>
            Always overwrite files.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.FastZip.ConfirmOverwriteDelegate">
            <summary>
            Delegate called when confirming overwriting of files.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">
            <summary>
            Strategies for deflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Default">
            <summary>
            The default strategy
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.Filtered">
            <summary>
            This strategy will only allow longer string repetitions.  It is
            useful for random data with a small character set.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy.HuffmanOnly">
            <summary>
            This strategy will not look for string repetitions at all.  It
            only encodes with Huffman trees (which means, that more common
            characters get a smaller encoding.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine">
            <summary>
            Low level compression engine for deflate algorithm which uses a 32K sliding window
            with secondary compression from Huffman/Shannon-Fano codes.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants">
            <summary>
            This class contains constants used for deflation.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEBUGGING">
            <summary>
            Set to true to enable debugging
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STORED_BLOCK">
            <summary>
            Written to Zip file to identify a stored block
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.STATIC_TREES">
            <summary>
            Identifies static tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DYN_TREES">
            <summary>
            Identifies dynamic tree in Zip file
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PRESET_DICT">
            <summary>
            Header flag indicating a preset dictionary for deflation
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFAULT_MEM_LEVEL">
            <summary>
            Sets internal buffer sizes for Huffman encoding
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_MATCH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_WBITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WSIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.WMASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_BITS">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_MASK">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.HASH_SHIFT">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MIN_LOOKAHEAD">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_DIST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.PENDING_BUF_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_STORED">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_FAST">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.DEFLATE_SLOW">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_BLOCK_SIZE">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.GOOD_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_LAZY">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.NICE_LENGTH">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.MAX_CHAIN">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterConstants.COMPR_FUNC">
            <summary>
            Internal compression engine constant
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.head">
            <summary>
            Hashtable, hashing three characters to an index for window, so
            that window[index]..window[index+2] have this hash code.  
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.prev">
            <summary>
            <code>prev[index &amp; WMASK]</code> points to the previous index that has the
            same hash code as the string starting at index.  This way 
            entries with the same hash code are in a linked list.
            Note that the array should really be unsigned short, so you need
            to and the values with 0xffff.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.strstart">
            <summary>
            Points to the current character in the window.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.lookahead">
            <summary>
            lookahead is the number of characters starting at strstart in
            window that are valid.
            So window[strstart] until window[strstart+lookahead-1] are valid
            characters.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.window">
            <summary>
            This array contains the part of the uncompressed stream that 
            is of relevance.  The current character is indexed by strstart.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.comprFunc">
            <summary>
            The current compression function.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputBuf">
            <summary>
            The input data for compression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.totalIn">
            <summary>
            The total bytes of input read.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputOff">
            <summary>
            The offset into inputBuf, where input data starts.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.inputEnd">
            <summary>
            The end offset of the input data.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.adler">
            <summary>
            The adler checksum
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">
            Pending buffer to use
            </param>>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.ResetAdler">
            <summary>
            Reset Adler checksum
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetLevel(System.Int32)">
            <summary>
            Set the deflate level (0-9)
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.InsertString">
            <summary>
            Inserts the current string in the head hash and returns the previous
            value for this hash.
            </summary>
            <returns>The previous hash value</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FillWindow">
            <summary>
            Fill the window
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.FindLongestMatch(System.Int32)">
             <summary>
             Find the best (longest) string in the window matching the 
             string starting at strstart.
            
             Preconditions:
             <code>
             strstart + MAX_MATCH &lt;= window.length.</code>
             </summary>
             <param name="curMatch"></param>
             <returns>True if a match greater than the minimum length is found</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Set compression dictionary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Deflate(System.Boolean,System.Boolean)">
            <summary>
            Deflate drives actual compression of data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets input data to be deflated.  Should only be called when <code>NeedsInput()</code>
            returns true
            </summary>
            <param name="buf">The buffer containing input data.</param>
            <param name="off">The index of the first byte of data.</param>
            <param name="len">The number of bytes of data to use as input.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.NeedsInput">
            <summary>
            Return true if input is needed via <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.SetInput(System.Byte[],System.Int32,System.Int32)"> SetInput</see>
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Adler">
            <summary>
            Get current value of Adler checksum
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.TotalIn">
            <summary>
            Total data processed
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterEngine.Strategy">
            <summary>
            Get/set the <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy">deflate strategy</see>
            </summary>		
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipConstants">
            <summary>
            This class contains constants used for gzip.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FTEXT">
            <summary>
            Flag bit mask for text
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FHCRC">
            <summary>
            Flag bitmask for Crc
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FEXTRA">
            <summary>
            Flag bit mask for extra
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FNAME">
            <summary>
            flag bitmask for name
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.FCOMMENT">
            <summary>
            flag bit mask indicating comment is present
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipConstants.GZIP_MAGIC">
            <summary>
            Magic number found at start of GZIP header
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2Exception">
            <summary>
            BZip2Exception represents exceptions specific to Bzip2 algorithm
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2Exception.#ctor">
            <summary>
            Initialise a new instance of BZip2Exception.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2Exception.#ctor(System.String)">
            <summary>
            Initialise a new instance of BZip2Exception with its message set to message.
            </summary>
            <param name="message">The message describing the error.</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.IO.WriteStrToFile(System.String,System.String,System.Boolean)">
            <summary>
            向个一个文件写入一个串
            </summary>
            <param name="_fileName">文件名</param>
            <param name="_content">输出内容</param>
            <param name="_isAppend">是否追加</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.IO.SaveObjectBytes(System.Object)">
            <summary>
            将对象串行化(字节数组)
            </summary>
            <param name="_object">要保存的对象</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.IO.SaveObjectMS(System.Object)">
            <summary>
            将对象串行化(内存流)
            </summary>
            <param name="_object">要保存的对象</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.IO.ReadObject(System.Byte[])">
            <summary>
            将对象反串行化生成出来(字节数组)
            </summary>
            <param name="_bytes">保存对象的字节数组</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.IO.ReadObject(System.IO.MemoryStream)">
            <summary>
            将对象反串行化生成出来(内存流)
            </summary>
            <param name="_ms">保存对象的内存流</param>
        </member>
        <member name="T:RealTime.Common.CommonClass.DbHelperSQL">
            <summary>
            数据访问抽象基础类
            Copyright (C) 2004-2008 By LiTianPing 
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DbHelperSQL.connectionString">
            <summary>
            数据库连接字符串(web.config来配置)，可以动态更改connectionString支持多数据库.	
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ColumnExists(System.String,System.String)">
            <summary>
            判断是否存在某表的某个字段
            </summary>
            <param name="tableName">表名称</param>
            <param name="columnName">列名称</param>
            <returns>是否存在</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.TabExists(System.String)">
            <summary>
            表是否存在
            </summary>
            <param name="TableName"></param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ExecuteSql(System.String)">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ExecuteSqlTran(System.Collections.Generic.List{System.String})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">多条SQL语句</param>		
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ExecuteSql(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ExecuteSqlGet(System.String,System.String)">
            <summary>
            执行带一个存储过程参数的的SQL语句。
            </summary>
            <param name="SQLString">SQL语句</param>
            <param name="content">参数内容,比如一个字段是格式复杂的文章，有特殊符号，可以通过这个方式添加</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ExecuteSqlInsertImg(System.String,System.Byte[])">
            <summary>
            向数据库里插入图像格式的字段(和上面情况类似的另一种实例)
            </summary>
            <param name="strSQL">SQL语句</param>
            <param name="fs">图像字节,数据库的字段类型为image的情况</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.GetSingle(System.String)">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ExecuteReader(System.String)">
            <summary>
            执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.Query(System.String)">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ExecuteSql(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行SQL语句，返回影响的记录数
            </summary>
            <param name="SQLString">SQL语句</param>
            <returns>影响的记录数</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ExecuteSqlTran(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ExecuteSqlTran(System.Collections.Generic.List{RealTime.Common.CommonClass.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ExecuteSqlTranWithIndentity(System.Collections.Generic.List{RealTime.Common.CommonClass.CommandInfo})">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ExecuteSqlTranWithIndentity(System.Collections.Hashtable)">
            <summary>
            执行多条SQL语句，实现数据库事务。
            </summary>
            <param name="SQLStringList">SQL语句的哈希表（key为sql语句，value是该语句的SqlParameter[]）</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.GetSingle(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行一条计算查询结果语句，返回查询结果（object）。
            </summary>
            <param name="SQLString">计算查询结果语句</param>
            <returns>查询结果（object）</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.ExecuteReader(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询语句，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="strSQL">查询语句</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.Query(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            执行查询语句，返回DataSet
            </summary>
            <param name="SQLString">查询语句</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.RunProcedure(System.String,System.Data.IDataParameter[])">
            <summary>
            执行存储过程，返回SqlDataReader ( 注意：调用该方法后，一定要对SqlDataReader进行Close )
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>SqlDataReader</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.RunProcedure(System.String,System.Data.IDataParameter[],System.String)">
            <summary>
            执行存储过程
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="tableName">DataSet结果中的表名</param>
            <returns>DataSet</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.BuildQueryCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            构建 SqlCommand 对象(用来返回一个结果集，而不是一个整数值)
            </summary>
            <param name="connection">数据库连接</param>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>SqlCommand</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.RunProcedure(System.String,System.Data.IDataParameter[],System.Int32@)">
            <summary>
            执行存储过程，返回影响的行数		
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <param name="rowsAffected">影响的行数</param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DbHelperSQL.BuildIntCommand(System.Data.SqlClient.SqlConnection,System.String,System.Data.IDataParameter[])">
            <summary>
            创建 SqlCommand 对象实例(用来返回一个整数值)	
            </summary>
            <param name="storedProcName">存储过程名</param>
            <param name="parameters">存储过程参数</param>
            <returns>SqlCommand 对象实例</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.CompressionMethod">
            <summary>
            The kind of compression used for an entry in an archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Stored">
            <summary>
            A direct copy of the file contents is held in the archive
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflated">
            <summary>
            Common Zip compression method using a sliding dictionary 
            of up to 32KB and secondary compression from Huffman/Shannon-Fano trees
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.Deflate64">
            <summary>
            An extension to deflate with a 64KB window. Not supported by #Zip
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.BZip2">
            <summary>
            Not supported by #Zip
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.CompressionMethod.WinZipAES">
            <summary>
            WinZip special for AES encryption, Not supported by #Zip
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags">
            <summary>
            Defines the contents of the general bit flags field for an archive entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Encrypted">
            <summary>
            If set indicates that the file is encrypted
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Method">
            <summary>
            Two bits defining the compression method (only for OpenConfig 6 Imploding and 8,9 Deflating)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Descriptor">
            <summary>
            If set a trailing data desciptor is appended to the entry data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.Patched">
            <summary>
            If set indicates the file contains Pkzip compressed patched data.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.StrongEncryption">
            <summary>
            If set strong encryption has been used for this entry.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.EnhancedCompress">
            <summary>
            Reserved by PKWare for enhanced compression.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.GeneralBitFlags.HeaderMasked">
            <summary>
            If set indicates that values in the local header are masked to hide
            their actual values.
            </summary>
            <remarks>
            Used when encrypting ht ecentral directory contents.
            </remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipConstants">
            <summary>
            This class contains constants used for Zip format files
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_MADE_BY">
            <summary>
            The version made by field for entries in the central header when created by this library
            </summary>
            <remarks>
            This is also the Zip version for the library when comparing against the version required to extract
            for an entry.  See <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">ZipInputStream.CanDecompressEntry</see>.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.VERSION_STRONG_ENCRYPTION">
            <summary>
            The minimum version required to support strong encryption
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCHDR">
            <summary>
            Size of local entry header (excluding variable length fields at end)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCSIG">
            <summary>
            Signature for local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCVER">
            <summary>
            Offset of version to extract in local entry header
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCFLG">
            <summary>
            Offset of general purpose flags in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCHOW">
            <summary>
            Offset of compression method in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCTIM">
            <summary>
            Offset of last mod file time + date in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCCRC">
            <summary>
            Offset of crc-32 in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCSIZ">
            <summary>
            Offset of compressed size in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCLEN">
            <summary>
            Offset of uncompressed size in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCNAM">
            <summary>
            Offset of file name length in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.LOCEXT">
            <summary>
            Offset of extra field length in local entry header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANNINGSIG">
            <summary>
            Signature for spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.SPANTEMPSIG">
            <summary>
            Signature for temporary spanning entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTSIG">
            <summary>
            Signature for data descriptor
            </summary>
            <remarks>
            This is only used where the length, Crc, or compressed size isnt known when the
            entry is created and the output stream doesnt support seeking.
            The local entry cannot be 'patched' with the correct values in this case
            so the values are recorded after the data prefixed by this header, as well as in the central directory.
            </remarks>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTHDR">
            <summary>
            Size of data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTCRC">
            <summary>
            Offset of crc-32 in data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTSIZ">
            <summary>
            Offset of compressed size in data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.EXTLEN">
            <summary>
            Offset of uncompressed length in data descriptor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG">
            <summary>
            Signature for central header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENHDR">
            <summary>
            Size of central header entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENVEM">
            <summary>
            Offset of version made by in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENVER">
            <summary>
            Offset of version needed to extract in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENFLG">
            <summary>
            Offset of general purpose bit flag in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENHOW">
            <summary>
            Offset of compression method in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENTIM">
            <summary>
            Offset of time/date in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENCRC">
            <summary>
            Offset of crc-32 in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIZ">
            <summary>
            Offset of compressed size in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENLEN">
            <summary>
            Offset of uncompressed size in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENNAM">
            <summary>
            Offset of file name length in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENEXT">
            <summary>
            Offset of extra field length in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENCOM">
            <summary>
            Offset of file comment length in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENDSK">
            <summary>
            Offset of disk start number in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENATT">
            <summary>
            Offset of internal file attributes in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENATX">
            <summary>
            Offset of external file attributes in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENOFF">
            <summary>
            Offset of relative offset of local header in central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENSIG64">
            <summary>
            Signature for Zip64 central file header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CENDIGITALSIG">
            <summary>
            Central header digitial signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSIG">
            <summary>
            End of central directory record signature
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDHDR">
            <summary>
            Size of end of central record (excluding variable fields)
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDNRD">
            <summary>
            Offset of number of this disk
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDDCD">
            <summary>
            Offset of number of disk with start of central directory
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSUB">
            <summary>
            Offset of number of entries in the central directory of this disk
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDTOT">
            <summary>
            Offset of total number of entries in the central directory
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDSIZ">
            <summary>
            Offset of size of central directory
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDOFF">
            <summary>
            Offset of offset of start of central directory with respect to starting disk number
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.ENDCOM">
            <summary>
            Offset of ZIP file comment length
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipConstants.CRYPTO_HEADER_SIZE">
            <summary>
            Size of cryptographic header stored before entry data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[],System.Int32)">
            <summary>
            Convert a portion of a byte array to a string.
            </summary>		
            <param name="data">
            Data to convert to string
            </param>
            <param name="length">
            Number of bytes to convert starting from index 0
            </param>
            <returns>
            data[0]..data[length - 1] converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToString(System.Byte[])">
            <summary>
            Convert byte array to string
            </summary>
            <param name="data">
            Byte array to convert
            </param>
            <returns>
            <paramref name="data">data</paramref>converted to a string
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipConstants.ConvertToArray(System.String)">
            <summary>
            Convert a string to a byte array
            </summary>
            <param name="str">
            String to convert to an array
            </param>
            <returns>Converted array</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipConstants.DefaultCodePage">
            <summary>
            Default encoding used for string conversion.  0 gives the default system Ansi code page.
            Dont use unicode encodings if you want to be Zip compatible!
            Using the default code page isnt the full solution neccessarily
            there are many variable factors, codepage 850 is often a good choice for
            European users, however be careful about compatability.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">
            <summary>
            An input buffer customised for use by <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            </summary>
            <remarks>
            The buffer supports decryption of incoming data.
            </remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.#ctor(System.IO.Stream)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer"/>
            </summary>
            <param name="stream">The stream to buffer.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.SetInflaterInput(ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Call <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])"/> passing the current clear text buffer contents.
            </summary>
            <param name="inflater">The inflater to set input for.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Fill">
            <summary>
            Fill the buffer from the underlying input stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[])">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="buffer">The buffer to fill</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadRawBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a buffer directly from the input stream
            </summary>
            <param name="outBuffer">The buffer to read into</param>
            <param name="offset">The offset to start reading data into.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadClearTextBuffer(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read clear text data from the input stream.
            </summary>
            <param name="outBuffer">The buffer to add data to.</param>
            <param name="offset">The offset to start adding data at.</param>
            <param name="length">The number of bytes to read.</param>
            <returns>Returns the number of bytes actually read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeByte">
            <summary>
            Read a byte from the input stream.
            </summary>
            <returns>Returns the byte read.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ReadLeLong">
            <summary>
            Read an int baseInputStream little endian byte order.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawLength">
            <summary>
            Get the length of bytes bytes in the <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.RawData">
            <summary>
            Get the contents of the raw data buffer.
            </summary>
            <remarks>This may contain encrypted data.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearTextLength">
            <summary>
            Get the number of useable bytes in <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText"/>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.ClearText">
            <summary>
            Get the contents of the clear text buffer.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.Available">
            <summary>
            Get/set the number of bytes available
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer.CryptoTransform">
            <summary>
            Get/set the <see cref="T:System.Security.Cryptography.ICryptoTransform"/> to apply to any data.
            </summary>
            <remarks>Set this value to null to have no transform applied.</remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream">
             <summary>
             This filter stream is used to decompress data compressed using the "deflate"
             format. The "deflate" format is described in RFC 1951.
            
             This stream may form the basis for other decompression filters, such
             as the <see cref="T:ICSharpCode.SharpZipLib.GZip.GZipInputStream">GZipInputStream</see>.
            
             Author of the original java version : John Leuner.
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inf">
            <summary>
            Decompressor for this stream
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.inputBuffer">
            <summary>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputBuffer">Input buffer</see> for this stream.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.baseInputStream">
            <summary>
            Base stream the inflater reads from.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.csize">
            <summary>
            The compressed size
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Sets the position within the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.SetLength(System.Int64)">
            <summary>
            Set the length of the current stream
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a sequence of bytes to stream and advances the current position
            This method always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.WriteByte(System.Byte)">
            <summary>
            Writes one byte to the current stream and advances the current position
            Always throws a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.BeginWrite(System.Byte[],System.Int32,System.Int32,System.AsyncCallback,System.Object)">
            <summary>
            Entry point to begin an asynchronous write.  Always throws a NotSupportedException.
            </summary>
            <param name="buffer">The buffer to write data from</param>
            <param name="offset">Offset of first byte to write</param>
            <param name="count">The maximum number of bytes to write</param>
            <param name="callback">The method to be called when the asynchronous write operation is completed</param>
            <param name="state">A user-provided object that distinguishes this particular asynchronous write request from other requests</param>
            <returns>An <see cref="T:System.IAsyncResult">IAsyncResult</see> that references the asynchronous write</returns>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream)">
            <summary>
            Create an InflaterInputStream with the default decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and a default buffer size of 4KB.
            </summary>
            <param name = "baseInputStream">
            The source of input data
            </param>
            <param name = "inf">
            The decompressor used to decompress data read from baseInputStream
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.#ctor(System.IO.Stream,ICSharpCode.SharpZipLib.Zip.Compression.Inflater,System.Int32)">
            <summary>
            Create an InflaterInputStream with the specified decompressor
            and the specified buffer size.
            </summary>
            <param name = "baseInputStream">
            The InputStream to read bytes from
            </param>
            <param name = "inflater">
            The decompressor to use
            </param>
            <param name = "bufferSize">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close">
            <summary>
            Closes the input stream.  When <see cref="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner"></see>
            is true the underlying stream is also closed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Fill">
            <summary>
            Fills the buffer with more data to decompress.
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Decompresses data into the byte array
            </summary>
            <param name="b">
            The array to read and decompress data into
            </param>
            <param name="off">
            The offset indicating where the data should be placed
            </param>
            <param name="len">
            The number of bytes to decompress
            </param>
            <returns>The number of bytes read.  Zero signals the end of stream</returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            Inflater needs a dictionary
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Skip(System.Int64)">
            <summary>
            Skip specified number of bytes of uncompressed data
            </summary>
            <param name="n">
            Number of bytes to skip
            </param>
            <returns>
            The number of bytes skipped, zero if the end of 
            stream has been reached
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Number of bytes to skip is zero or less
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.StopDecrypting">
            <summary>
            Clear any cryptographic state.
            </summary>		
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.IsStreamOwner">
            <summary>
            Get/set flag indicating ownership of underlying stream.
            When the flag is true <see cref="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Close"/> will close the underlying stream also.
            </summary>
            <remarks>
            The default value is true.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanSeek">
            <summary>
            Gets a value of false indicating seeking is not supported for this stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.CanWrite">
            <summary>
            Gets a value of false indicating that this stream is not writeable.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Length">
            <summary>
            A value representing the length of the stream in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Position">
            <summary>
            The current position within the stream.
            Throws a NotSupportedException when attempting to set the position
            </summary>
            <exception cref="T:System.NotSupportedException">Attempting to set the position</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream.Available">
            <summary>
            Returns 0 once the end of the stream (EOF) has been reached.
            Otherwise returns 1.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater">
             <summary>
             This is the Deflater class.  The deflater class compresses input
             with the deflate algorithm described in RFC 1951.  It has several
             compression levels and three different strategies described below.
            
             This class is <i>not</i> thread safe.  This is inherent in the API, due
             to the split of deflate and setInput.
             
             author of the original java version : Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_COMPRESSION">
            <summary>
            The best and slowest compression level.  This tries to find very
            long and distant string repetitions.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.BEST_SPEED">
            <summary>
            The worst but fastest compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFAULT_COMPRESSION">
            <summary>
            The default compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.NO_COMPRESSION">
            <summary>
            This level won't compress at all but output uncompressed blocks.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.DEFLATED">
            <summary>
            The compression method.  This is the only method supported so far.
            There is no need to use this constant at all.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.level">
            <summary>
            Compression level.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.noZlibHeaderOrFooter">
            <summary>
            If true no Zlib/RFC1950 headers or footers are generated
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.state">
            <summary>
            The current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.totalOut">
            <summary>
            The total bytes of output written.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.pending">
            <summary>
            The pending output.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.engine">
            <summary>
            The deflater engine.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor">
            <summary>
            Creates a new deflater with default compression level.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="lvl">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION, or DEFAULT_COMPRESSION.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.#ctor(System.Int32,System.Boolean)">
            <summary>
            Creates a new deflater with given compression level.
            </summary>
            <param name="level">
            the compression level, a value between NO_COMPRESSION
            and BEST_COMPRESSION.
            </param>
            <param name="noZlibHeaderOrFooter">
            true, if we should suppress the Zlib/RFC1950 header at the
            beginning and the adler checksum at the end of the output.  This is
            useful for the GZIP/PKZIP formats.
            </param>
            <exception cref="T:System.ArgumentOutOfRangeException">if lvl is out of range.</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Reset">
            <summary>
            Resets the deflater.  The deflater acts afterwards as if it was
            just created with the same compression level and strategy as it
            had before.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Flush">
            <summary>
            Flushes the current input block.  Further calls to deflate() will
            produce enough output to inflate everything in the current input
            block.  This is not part of Sun's JDK so I have made it package
            private.  It is used by DeflaterOutputStream to implement
            flush().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Finish">
            <summary>
            Finishes the deflater with the current input block.  It is an error
            to give more input after this method was called.  This method must
            be called to force all bytes to be flushed.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[])">
            <summary>
            Sets the data which should be compressed next.  This should be only
            called when needsInput indicates that more input is needed.
            If you call setInput when needsInput() returns false, the
            previous input that is still pending will be thrown away.
            The given byte array should not be changed, before needsInput() returns
            true again.
            This call is equivalent to <code>setInput(input, 0, input.length)</code>.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended().
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the data which should be compressed next.  This should be
            only called when needsInput indicates that more input is needed.
            The given byte array should not be changed, before needsInput() returns
            true again.
            </summary>
            <param name="input">
            the buffer containing the input data.
            </param>
            <param name="off">
            the start of the data.
            </param>
            <param name="len">
            the length of the data.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if the buffer was finished() or ended() or if previous input is still pending.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetLevel(System.Int32)">
            <summary>
            Sets the compression level.  There is no guarantee of the exact
            position of the change, but if you call this when needsInput is
            true the change of compression level will occur somewhere near
            before the end of the so far given input.
            </summary>
            <param name="lvl">
            the new compression level.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.GetLevel">
            <summary>
            Get current compression level
            </summary>
            <returns>Returns the current compression level</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetStrategy(ICSharpCode.SharpZipLib.Zip.Compression.DeflateStrategy)">
            <summary>
            Sets the compression strategy. Strategy is one of
            DEFAULT_STRATEGY, HUFFMAN_ONLY and FILTERED.  For the exact
            position where the strategy is changed, the same as for
            setLevel() applies.
            </summary>
            <param name="strategy">
            The new compression strategy.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[])">
            <summary>
            Deflates the current input block with to the given array.
            </summary>
            <param name="output">
            The buffer where compressed data is stored
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Deflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Deflates the current input block to the given array.
            </summary>
            <param name="output">
            Buffer to store the compressed data.
            </param>
            <param name="offset">
            Offset into the output array.
            </param>
            <param name="length">
            The maximum number of bytes that may be stored.
            </param>
            <returns>
            The number of compressed bytes added to the output, or 0 if either
            needsInput() or finished() returns true or length is zero.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            If end() was previously called.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            If offset and/or length don't match the array length.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            This call is equivalent to <code>setDictionary(dict, 0, dict.Length)</code>.
            </summary>
            <param name="dict">
            the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            if setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the dictionary which should be used in the deflate process.
            The dictionary is a byte array containing strings that are
            likely to occur in the data which should be compressed.  The
            dictionary is not stored in the compressed output, only a
            checksum.  To decompress the output you need to supply the same
            dictionary again.
            </summary>
            <param name="dict">
            The dictionary data
            </param>
            <param name="offset">
            An offset into the dictionary.
            </param>
            <param name="length">
            The length of the dictionary data to use
            </param>
            <exception cref="T:System.InvalidOperationException">
            If setInput () or deflate () were already called or another dictionary was already set.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.Adler">
            <summary>
            Gets the current adler checksum of the data that was processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalIn">
            <summary>
            Gets the number of input bytes processed so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.TotalOut">
            <summary>
            Gets the number of output bytes so far.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsFinished">
            <summary>
            Returns true if the stream was finished and no more output bytes
            are available.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Deflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method can also return true when the stream
            was finished.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipOutputStream">
             <summary>
             This filter stream is used to compress a stream into a "GZIP" stream.
             The "GZIP" format is described in RFC 1952.
            
             author of the original java version : John Leuner
             </summary>
             <example> This sample shows how to gzip a file
             <code>
             using System;
             using System.IO;
             
             using ICSharpCode.SharpZipLib.GZip;
             
             class MainClass
             {
             	public static void Main(string[] args)
             	{
             		Stream s = new GZipOutputStream(File.Create(args[0] + ".gz"));
             		FileStream fs = File.OpenRead(args[0]);
             		byte[] writeData = new byte[fs.Length];
             		fs.Read(writeData, 0, (int)fs.Length);
             		s.Write(writeData, 0, writeData.Length);
             		s.Close();
             	}
             }	
             </code>
             </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipOutputStream with the default buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZipOutputStream with the specified buffer size
            </summary>
            <param name="baseOutputStream">
            The stream to read data (to be compressed) from
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write given buffer to output updating crc
            </summary>
            <param name="buf">Buffer to write</param>
            <param name="off">Offset of first byte in buf to write</param>
            <param name="len">Number of bytes to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Close">
            <summary>
            Writes remaining compressed output data to the output stream
            and closes it.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.SetLevel(System.Int32)">
            <summary>
            Sets the active compression level (1-9).  The new level will be activated
            immediately.
            </summary>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Level specified is not supported.
            </exception>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Deflater"/>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.GetLevel">
            <summary>
            Get the current compression level.
            </summary>
            <returns>The current compression level.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipOutputStream.Finish">
            <summary>
            Finish compression and write any footer information required to stream
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.SqlHelper">
            <summary>
            作者：秦利军
            日期：20091224
            功能：一个简单的数据库访问类，如果后期数据访问量大，对数据库操作多，建议改用企业库
             取得与数据库的连接，获取ado.net 对象
            日期:2010-05-07 黄利华
            除网站中使用.其它全部替换为DBHelperSql类
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SqlHelper.ConnectionStringToRealTime">
            <summary>
            定义数据库连接串(实时数据库连接)
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.SqlHelper.connectingString">
            <summary>
            数据库连接串
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.#ctor">
            <summary>
            构造函数
            </summary>
            <param name="dbSelect"></param>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.Close">
            <summary>
            关闭连接
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.Dispose">
            <summary>
            释放连接资源
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.ExecuteCommand(System.String)">
            <summary>
            单个数据增，删，改
            </summary>
            <param name="strSql">sql语句文本</param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.GetReader(System.String)">
            <summary>
            查询表,获取多个记录
            </summary>
            <param name="strSql">sql语句文本</param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.GetDataSet(System.String)">
            <summary>
            返回datatable
            </summary>
            <param name="strSql">sql语句文本</param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.ExecuteNonQuery(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            使用连接字符串，执行一个SqlCommand命令（没有记录返回）
            使用提供的参数集.
            </summary>
            <param name="commandType">命令类型CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">存贮过程名称或是一个T-SQL语句串</param>
            <param name="commandParameters">执行命令的参数集</param>
            <returns>受此命令影响的行数</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            在一个存在的连接上执行数据库的命令操作
            使用提供的参数集.
            </summary>
            <param name="conn">一个存在的数据库连接对象</param>
            <param name="commandType">命令类型CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">存贮过程名称或是一个T-SQL语句串</param>
            <param name="commandParameters">执行命令的参数集</param>
            <returns>受此命令影响的行数</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.RunTransaction">
            <summary>
            开启一个事务
            </summary>
            <param name="dbSelect"></param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            在一个事务的连接上执行数据库的命令操作
            使用提供的参数集.
            </summary>
            <param name="trans">一个存在的事务</param>
            <param name="commandType">命令类型CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">存贮过程名称或是一个T-SQL语句串</param>
            <param name="commandParameters">执行命令的参数集</param>
            <returns>受此命令影响的行数</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.ExecuteNonQuery(System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String)">
            <summary>
            在一个事务的连接上执行数据库的命令操作
            使用提供的参数集.
            </summary>
            <param name="trans">一个存在的事务</param>
            <param name="commandType">命令类型CommandType (stored procedure, text, etc.)</param>
            <param name="commandText">存贮过程名称或是一个T-SQL语句串</param>
            <param name="commandParameters">执行命令的参数集</param>
            <returns>受此命令影响的行数</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.ExecuteReader(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            在一个连接串上执行一个命令，返回一个SqlDataReader对象
            使用提供的参数.
            </summary>
            <param name="connectionString">一个有效的SqlConnection连接串</param>
            <param name="commandType">命令类型CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">存贮过程名称或是一个T-SQL语句串</param>
            <param name="commandParameters">执行命令的参数集</param>
            <returns>一个结果集对象SqlDataReader</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.ExecuteScalar(System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            在一个连接串上执行一个命令，返回表中第一行，第一列的值
            使用提供的参数.
            </summary>
            <param name="connectionString">一个有效的SqlConnection连接串</param>
            <param name="commandType">命令类型CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">存贮过程名称或是一个T-SQL语句串</param>
            <param name="commandParameters">执行命令的参数集</param>       
            <returns>返回的对象，在使用时记得类型转换</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.ExecuteScalar(System.Data.SqlClient.SqlConnection,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            在一个连接上执行一个命令，返回表中第一行，第一列的值
            使用提供的参数.
            </summary>
            <param name="connectionString">一个有效的SqlConnection连接</param>
            <param name="commandType">命令类型CommandType(stored procedure, text, etc.)</param>
            <param name="commandText">存贮过程名称或是一个T-SQL语句串</param>
            <param name="commandParameters">执行命令的参数集</param>       
            <returns>返回的对象，在使用时记得类型转换</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.CacheParameters(System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            在缓存中添加参数数组
            </summary>
            <param name="cacheKey">参数的Key</param>
            <param name="cmdParms">参数数组</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.GetCachedParameters(System.String)">
            <summary>
            提取缓存的参数数组
            </summary>
            <param name="cacheKey">查找缓存的key</param>
            <returns>返回被缓存的参数数组</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.SqlHelper.PrepareCommand(System.Data.SqlClient.SqlCommand,System.Data.SqlClient.SqlConnection,System.Data.SqlClient.SqlTransaction,System.Data.CommandType,System.String,System.Data.SqlClient.SqlParameter[])">
            <summary>
            提供一个SqlCommand对象的设置
            </summary>
            <param name="cmd">SqlCommand对象</param>
            <param name="conn">SqlConnection 对象</param>
            <param name="trans">SqlTransaction 对象</param>
            <param name="cmdType">CommandType 如存贮过程，T-SQL</param>
            <param name="cmdText">存贮过程名或查询串</param>
            <param name="cmdParms">命令中用到的参数集</param>
        </member>
        <member name="P:RealTime.Common.CommonClass.SqlHelper.Connection">
            <summary>
            创建连接
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.ConfigUtil">
            <summary>
            配置读写类
            作者：蒋小华
            日期：2009-7-24
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigUtil.GetIintDirectory">
            <summary>
            系统运行的初始目录
            </summary>
            <returns>取得系统运行初始目录</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigUtil.#cctor">
            <summary>
            构造函数打开默认配置文件
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigUtil.GetKeyValue(System.String)">
            <summary>
            取配置,适用于AppSettings
            </summary>
            <param name="_key">关键字</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.ConfigUtil.SetKeyValue(System.String,System.String)">
            <summary>
            设置配置,适用于AppSettings
            </summary>
            <param name="_key">关键字</param>
            <param name="_value">值</param>
        </member>
        <member name="F:RealTime.Common.CommonClass.EffentNextType.None">
            <summary>
            对其他语句无任何影响 
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.EffentNextType.WhenHaveContine">
            <summary>
            当前语句必须为"select count(1) from .."格式，如果存在则继续执行，不存在回滚事务
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.EffentNextType.WhenNoHaveContine">
            <summary>
            当前语句必须为"select count(1) from .."格式，如果不存在则继续执行，存在回滚事务
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.EffentNextType.ExcuteEffectRows">
            <summary>
            当前语句影响到的行数必须大于0，否则回滚事务
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.EffentNextType.SolicitationEvent">
            <summary>
            引发事件-当前语句必须为"select count(1) from .."格式，如果不存在则继续执行，存在回滚事务
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipInputStream">
            <summary>
            This is an InflaterInputStream that reads the files baseInputStream an zip archive
            one after another.  It has a special method to get the zip entry of
            the next file.  The zip entry contains information about the file name
            size, compressed size, Crc, etc.
            It includes support for Stored and Deflated entries.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            
            <example> This sample shows how to read a zip file
            <code lang="C#">
            using System;
            using System.Text;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		ZipInputStream s = new ZipInputStream(File.OpenRead(args[0]));
            		
            		ZipEntry theEntry;
            		while ((theEntry = s.GetNextEntry()) != null) {
            			int size = 2048;
            			byte[] data = new byte[2048];
            			
            			Console.Write("Show contents (y/n) ?");
            			if (Console.ReadLine() == "y") {
            				while (true) {
            					size = s.Read(data, 0, data.Length);
            					if (size > 0) {
            						Console.Write(new ASCIIEncoding().GetString(data, 0, size));
            					} else {
            						break;
            					}
            				}
            			}
            		}
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipInputStream.internalReader">
            <summary>
            The current reader this instance.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a new Zip input stream, for reading a zip archive.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.GetNextEntry">
            <summary>
            Advances to the next entry in the archive
            </summary>
            <returns>
            The next <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry">entry</see> in the archive or null if there are no more entries.
            </returns>
            <remarks>
            If the previous entry is still open <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">CloseEntry</see> is called.
            </remarks>
            <exception cref="T:System.InvalidOperationException">
            Input stream is closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            Password is not set, password is invalid, compression method is invalid, 
            version required to extract is not supported
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CloseEntry">
            <summary>
            Closes the current zip entry and moves to the next one.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The stream is closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The Zip stream ends early
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.ReadByte">
            <summary>
            Reads a byte from the current zip entry.
            </summary>
            <returns>
            The byte or -1 if end of stream is reached.
            </returns>
            <exception name="System.IO.IOException">
            An i/o error occured.
            </exception>
            <exception name="ICSharpCode.SharpZipLib.ZipException">
            The deflated stream is corrupted.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a block of bytes from the stream.
            </summary>
            <param name="destination">The destination for the bytes.</param>
            <param name="index">The index to start storing data.</param>
            <param name="count">The number of bytes to attempt to read.</param>
            <returns>Returns the number of bytes read.</returns>
            <remarks>Zero bytes read means end of stream.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.BodyRead(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads a block of bytes from the current zip entry.
            </summary>
            <returns>
            The number of bytes read (this may be less than the length requested, even before the end of stream), or 0 on end of stream.
            </returns>
            <exception name="IOException">
            An i/o error occured.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The deflated stream is corrupted.
            </exception>
            <exception cref="T:System.InvalidOperationException">
            The stream is not open.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Close">
            <summary>
            Closes the zip input stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Password">
            <summary>
            Optional password used for encryption when non-null
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.CanDecompressEntry">
            <summary>
            Gets a value indicating if the entry can be decompressed
            </summary>
            <remarks>
            The entry can only be decompressed if the library supports the zip features required to extract it.
            See the <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipEntry.Version">ZipEntry Version</see> property for more details.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipInputStream.Available">
            <summary>
            Returns 1 if there is an entry available
            Otherwise returns 0.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Inflater">
             <summary>
             Inflater is used to decompress data that has been compressed according
             to the "deflate" standard described in rfc1951.
             
             By default Zlib (rfc1950) headers and footers are expected in the input.
             You can use constructor <code> public Inflater(bool noHeader)</code> passing true
             if there is no Zlib header information
            
             The usage is as following.  First you have to set some input with
             <code>setInput()</code>, then inflate() it.  If inflate doesn't
             inflate any bytes there may be three reasons:
             <ul>
             <li>needsInput() returns true because the input buffer is empty.
             You have to provide more input with <code>setInput()</code>.
             NOTE: needsInput() also returns true when, the stream is finished.
             </li>
             <li>needsDictionary() returns true, you have to provide a preset
                dictionary with <code>setDictionary()</code>.</li>
             <li>finished() returns true, the inflater has finished.</li>
             </ul>
             Once the first output byte is produced, a dictionary will not be
             needed at a later stage.
            
             author of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DECODE_HEADER">
            <summary>
            These are the possible states for an inflater
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLENS">
            <summary>
            Copy lengths for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPLEXT">
            <summary>
            Extra bits for literal codes 257..285
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDIST">
            <summary>
            Copy offsets for distance codes 0..29
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.CPDEXT">
            <summary>
            Extra bits for distance codes
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.mode">
            <summary>
            This variable contains the current state.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.readAdler">
            <summary>
            The adler checksum of the dictionary or of the decompressed
            stream, as it is written in the header resp. footer of the
            compressed stream. 
            Only valid if mode is DECODE_DICT or DECODE_CHKSUM.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.neededBits">
            <summary>
            The number of bits needed to complete the current state.  This
            is valid, if mode is DECODE_DICT, DECODE_CHKSUM,
            DECODE_HUFFMAN_LENBITS or DECODE_HUFFMAN_DISTBITS.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.isLastBlock">
            <summary>
            True, if the last block flag was set in the last block of the
            inflated stream.  This means that the stream ends after the
            current block.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalOut">
            <summary>
            The total number of inflated bytes.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.totalIn">
            <summary>
            The total number of bytes set with setInput().  This is not the
            value returned by the TotalIn property, since this also includes the
            unprocessed input.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.noHeader">
            <summary>
            This variable stores the noHeader flag that was given to the constructor.
            True means, that the inflated stream doesn't contain a Zlib header or 
            footer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor">
            <summary>
            Creates a new inflater or RFC1951 decompressor
            RFC1950/Zlib headers and footers will be expected in the input data
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.#ctor(System.Boolean)">
            <summary>
            Creates a new inflater.
            </summary>
            <param name="noHeader">
            True if no RFC1950/Zlib header and footer fields are expected in the input data
            
            This is used for GZIPed/Zipped input.
            
            For compatibility with
            Sun JDK you should provide one byte of input more than needed in
            this case.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Reset">
            <summary>
            Resets the inflater so that a new stream can be decompressed.  All
            pending input and output will be discarded.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHeader">
            <summary>
            Decodes a zlib/RFC1950 header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            The header is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeDict">
            <summary>
            Decodes the dictionary checksum after the deflate header.
            </summary>
            <returns>
            False if more input is needed.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeHuffman">
            <summary>
            Decodes the huffman encoded symbols in the input stream.
            </summary>
            <returns>
            false if more input is needed, true if output window is
            full or the current block ends.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.DecodeChksum">
            <summary>
            Decodes the adler checksum after the deflate stream.
            </summary>
            <returns>
            false if more input is needed.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            If checksum doesn't match.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Decode">
            <summary>
            Decodes the deflated stream.
            </summary>
            <returns>
            false if more input is needed, or if finished.
            </returns>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[])">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetDictionary(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the preset dictionary.  This should only be called, if
            needsDictionary() returns true and it should set the same
            dictionary, that was used for deflating.  The getAdler()
            function returns the checksum of the dictionary needed.
            </summary>
            <param name="buffer">
            The dictionary.
            </param>
            <param name="offset">
            The offset into buffer where the dictionary starts.
            </param>
            <param name="len">
            The length of the dictionary.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No dictionary is needed.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            The adler checksum for the buffer is invalid
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[])">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buf">
            the input.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Sets the input.  This should only be called, if needsInput()
            returns true.
            </summary>
            <param name="buffer">
            The source of input data
            </param>
            <param name="offset">
            The offset into buffer where the input starts.
            </param>
            <param name="length">
            The number of bytes of input to use.
            </param>
            <exception cref="T:System.InvalidOperationException">
            No input is needed.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            The off and/or len are wrong.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[])">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further
            output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if buf has length 0.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Inflate(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Inflates the compressed stream to the output buffer.  If this
            returns 0, you should check, whether needsDictionary(),
            needsInput() or finished() returns true, to determine why no
            further output is produced.
            </summary>
            <param name="buf">
            the output buffer.
            </param>
            <param name="offset">
            the offset into buffer where the output should start.
            </param>
            <param name="len">
            the maximum length of the output.
            </param>
            <returns>
            the number of bytes written to the buffer, 0 if no further output can be produced.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if len is &lt;= 0.
            </exception>
            <exception cref="T:System.ArgumentOutOfRangeException">
            if the offset and/or len are wrong.
            </exception>
            <exception cref="T:System.FormatException">
            if deflated stream is invalid.
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingInput">
            <summary>
            Returns true, if the input buffer is empty.
            You should then call setInput(). 
            NOTE: This method also returns true when the stream is finished.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsNeedingDictionary">
            <summary>
            Returns true, if a preset dictionary is needed to inflate the input.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.IsFinished">
            <summary>
            Returns true, if the inflater has finished.  This means, that no
            input is needed and no output can be produced.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.Adler">
            <summary>
            Gets the adler checksum.  This is either the checksum of all
            uncompressed bytes returned by inflate(), or if needsDictionary()
            returns true (and thus no output was yet produced) this is the
            adler checksum of the expected dictionary.
            </summary>
            <returns>
            the adler checksum.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalOut">
            <summary>
            Gets the total number of output bytes returned by inflate().
            </summary>
            <returns>
            the total number of output bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.TotalIn">
            <summary>
            Gets the total number of processed compressed input bytes.
            </summary>
            <returns>
            The total number of bytes of processed input bytes.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Inflater.RemainingInput">
            <summary>
            Gets the number of unprocessed input bytes.  Useful, if the end of the
            stream is reached and you want to further process the bytes after
            the deflate stream.
            </summary>
            <returns>
            The number of bytes of the input which have not been processed.
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarOutputStream">
            <summary>
            The TarOutputStream writes a UNIX tar archive as an OutputStream.
            Methods are provided to put entries, and then write their contents
            by writing to this stream using write().
            </summary>
            public
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.debug">
            <summary>
            flag indicating debugging code should be activated or not
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.currSize">
            <summary>
            Size for the current entry
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.currBytes">
            <summary>
            bytes written for this entry so far
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.blockBuf">
            <summary>
            single block working buffer 
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.assemLen">
            <summary>
            current 'Assembly' buffer length
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.assemBuf">
            <summary>
            'Assembly' buffer used to assmble data before writing
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.buffer">
            <summary>
            TarBuffer used to provide correct blocking factor
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarOutputStream.outputStream">
            <summary>
            the destination stream for the archive contents
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            set the position within the current stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.SetLength(System.Int64)">
            <summary>
            set the length of the current stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.ReadByte">
            <summary>
            Read a byte from the stream and advance the position within the stream 
            by one byte or returns -1 if at the end of the stream.
            </summary>
            <returns>The byte value or -1 if at end of stream</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            read bytes from the current stream and advance the position within the 
            stream by the number of bytes read.
            </summary>
            <returns>The total number of bytes read, or zero if at the end of the stream</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Flush">
            <summary>
            All buffered data is written to destination
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct TarOutputStream using default block factor
            </summary>
            <param name="outputStream">stream to write to</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct TarOutputStream with user specified block factor
            </summary>
            <param name="outputStream">stream to write to</param>
            <param name="blockFactor">blocking factor</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Finish">
            <summary>
            Ends the TAR archive without closing the underlying OutputStream.
            The result is that the EOF record of nulls is written.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Close">
            <summary>
            Ends the TAR archive and closes the underlying OutputStream.
            This means that finish() is called followed by calling the
            TarBuffer's close().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            The TarBuffer record size.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.PutNextEntry(ICSharpCode.SharpZipLib.Tar.TarEntry)">
            <summary>
            Put an entry on the output stream. This writes the entry's
            header and positions the output stream for writing
            the contents of the entry. Once this method is called, the
            stream is ready for calls to write() to write the entry's
            contents. Once the contents are written, closeEntry()
            <B>MUST</B> be called to ensure that all buffered data
            is completely written to the output stream.
            </summary>
            <param name="entry">
            The TarEntry to be written to the archive.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CloseEntry">
            <summary>
            Close an entry. This method MUST be called for all file
            entries that contain data. The reason is that we must
            buffer data written to the stream in order to satisfy
            the buffer's block based writes. Thus, there may be
            data fragments still being assembled that must be written
            to the output stream before this entry is closed and the
            next entry written.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current tar archive entry.
            This method simply calls Write(byte[], int, int).
            </summary>
            <param name="b">
            The byte to be written.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes bytes to the current tar archive entry. This method
            is aware of the current entry and will throw an exception if
            you attempt to write bytes past the length specified for the
            current entry. The method is also (painfully) aware of the
            record buffering required by TarBuffer, and manages buffers
            that are not a multiple of recordsize in length, including
            assembling records from small buffers.
            </summary>
            <param name = "wBuf">
            The buffer to write to the archive.
            </param>
            <param name = "wOffset">
            The offset in the buffer from which to get bytes.
            </param>
            <param name = "numToWrite">
            The number of bytes to write.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarOutputStream.WriteEOFRecord">
            <summary>
            Write an EOF (end of archive) record to the tar archive.
            An EOF record consists of a record of all zeros.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanRead">
            <summary>
            true if the stream supports reading; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanSeek">
            <summary>
            true if the stream supports seeking; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.CanWrite">
            <summary>
            true if stream supports writing; otherwise, false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Length">
            <summary>
            length of stream in bytes
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarOutputStream.Position">
            <summary>
            gets or sets the position within the current stream.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.GZip.GZipInputStream">
            <summary>
            This filter stream is used to decompress a "GZIP" format stream.
            The "GZIP" format is described baseInputStream RFC 1952.
            
            author of the original java version : John Leuner
            </summary>
            <example> This sample shows how to unzip a gzipped file
            <code>
            using System;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.GZip;
            
            class MainClass
            {
            	public static void Main(string[] args)
            	{
            		Stream s = new GZipInputStream(File.OpenRead(args[0]));
            		FileStream fs = File.Create(Path.GetFileNameWithoutExtension(args[0]));
            		int size = 2048;
            		byte[] writeData = new byte[2048];
            		while (true) {
            			size = s.Read(writeData, 0, size);
            			if (size > 0) {
            				fs.Write(writeData, 0, size);
            			} else {
            				break;
            			}
            		}
            		s.Close();
            	}
            }	
            </code>
            </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipInputStream.crc">
            <summary>
            CRC-32 value for uncompressed data
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.GZip.GZipInputStream.eos">
            <summary>
            Indicates end of stream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream)">
            <summary>
            Creates a GzipInputStream with the default buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Creates a GZIPInputStream with the specified buffer size
            </summary>
            <param name="baseInputStream">
            The stream to read compressed data from (baseInputStream GZIP format)
            </param>
            <param name="size">
            Size of the buffer to use
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.GZip.GZipInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads uncompressed data into an array of bytes
            </summary>
            <param name="buf">
            The buffer to read uncompressed data into
            </param>
            <param name="offset">
            The offset indicating where the data should be placed
            </param>
            <param name="len">
            The number of uncompressed bytes to be read
            </param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassic">
            <summary>
            PkzipClassic embodies the classic or original encryption facilities used in Pkzip archives.
            While it has been superceded by more recent and more powerful algorithms, its still in use and 
            is viable for preventing casual snooping
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassic.GenerateKeys(System.Byte[])">
            <summary>
            Generates new encryption keys based on given seed
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase">
            <summary>
            PkzipClassicCryptoBase provides the low level facilities for encryption
            and decryption using the PkzipClassic algorithm.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.TransformByte">
            <summary>
            Transform a single byte 
            </summary>
            <returns>
            The transformed value
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.UpdateKeys(System.Byte)">
            <summary>
            Update encryption keys 
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicCryptoBase.Reset">
            <summary>
            Reset the internal state.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for encryption.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform"></see>
            </summary>
            <param name="keyBlock">The key block to use.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicEncryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform">
            <summary>
            PkzipClassic CryptoTransform for decryption.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.#ctor(System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform"></see>.
            </summary>
            <param name="keyBlock">The key block to decrypt with.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformFinalBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Transforms the specified region of the specified byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the byte array to use as data.</param>
            <returns>The computed transform.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.TransformBlock(System.Byte[],System.Int32,System.Int32,System.Byte[],System.Int32)">
            <summary>
            Transforms the specified region of the input byte array and copies 
            the resulting transform to the specified region of the output byte array.
            </summary>
            <param name="inputBuffer">The input for which to compute the transform.</param>
            <param name="inputOffset">The offset into the input byte array from which to begin using data.</param>
            <param name="inputCount">The number of bytes in the input byte array to use as data.</param>
            <param name="outputBuffer">The output to which to write the transform.</param>
            <param name="outputOffset">The offset into the output byte array from which to begin writing data.</param>
            <returns>The number of bytes written.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.Dispose">
            <summary>
            Cleanup internal state.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanReuseTransform">
            <summary>
            Gets a value indicating whether the current transform can be reused.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.InputBlockSize">
            <summary>
            Gets the size of the input data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.OutputBlockSize">
            <summary>
            Gets the size of the output data blocks in bytes.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicDecryptCryptoTransform.CanTransformMultipleBlocks">
            <summary>
            Gets a value indicating whether multiple blocks can be transformed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged">
            <summary>
            Defines a wrapper object to access the Pkzip algorithm. 
            This class cannot be inherited.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.GenerateIV">
            <summary>
            Generate an initial vector.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.GenerateKey">
            <summary>
            Generate a new random key.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.CreateEncryptor(System.Byte[],System.Byte[])">
            <summary>
            Create an encryptor.
            </summary>
            <param name="rgbKey">The key to use for this encryptor.</param>
            <param name="rgbIV">Initialisation vector for the new encryptor.</param>
            <returns>Returns a new PkzipClassic encryptor</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.CreateDecryptor(System.Byte[],System.Byte[])">
            <summary>
            Create a decryptor.
            </summary>
            <param name="rgbKey">Keys to use for this new decryptor.</param>
            <param name="rgbIV">Initialisation vector for the new decryptor.</param>
            <returns>Returns a new decryptor.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.BlockSize">
            <summary>
            Get / set the applicable block size.
            </summary>
            <remarks>The only valid block size is 8.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.LegalKeySizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">key sizes.</see>
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.LegalBlockSizes">
            <summary>
            Get an array of legal <see cref="T:System.Security.Cryptography.KeySizes">block sizes</see>.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Encryption.PkzipClassicManaged.Key">
            <summary>
            Get / set the key value applicable.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Adler32">
            <summary>
            Computes Adler32 checksum for a stream of data. An Adler32
            checksum is not as reliable as a CRC32 checksum, but a lot faster to
            compute.
            
            The specification for Adler32 may be found in RFC 1950.
            ZLIB Compressed Data Format Specification version 3.3)
            
            
            From that document:
            
                 "ADLER32 (Adler-32 checksum)
                  This contains a checksum value of the uncompressed data
                  (excluding any dictionary data) computed according to Adler-32
                  algorithm. This algorithm is a 32-bit extension and improvement
                  of the Fletcher algorithm, used in the ITU-T X.224 / ISO 8073
                  standard.
            
                  Adler-32 is composed of two sums accumulated per byte: s1 is
                  the sum of all bytes, s2 is the sum of all s1 values. Both sums
                  are done modulo 65521. s1 is initialized to 1, s2 to zero.  The
                  Adler-32 checksum is stored as s2*65536 + s1 in most-
                  significant-byte first (network) order."
            
             "8.2. The Adler-32 algorithm
            
               The Adler-32 algorithm is much faster than the CRC32 algorithm yet
               still provides an extremely low probability of undetected errors.
            
               The modulo on unsigned long accumulators can be delayed for 5552
               bytes, so the modulo operation time is negligible.  If the bytes
               are a, b, c, the second sum is 3a + 2b + c + 3, and so is position
               and order sensitive, unlike the first sum, which is just a
               checksum.  That 65521 is prime is important to avoid a possible
               large class of two-byte errors that leave the check unchanged.
               (The Fletcher checksum uses 255, which is not prime and which also
               makes the Fletcher check insensitive to single byte changes 0 -
               255.)
            
               The sum s1 is initialized to 1 instead of zero to make the length
               of the sequence part of s2, so that the length does not have to be
               checked separately. (Any sequence of zeroes has a Fletcher
               checksum of zero.)"
            </summary>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.InflaterInputStream"/>
            <see cref="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.DeflaterOutputStream"/>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.IChecksum">
            <summary>
            Interface to compute a data checksum used by checked input/output streams.
            A data checksum can be updated by one byte or with a byte array. After each
            update the value of the current checksum can be returned by calling
            <code>getValue</code>. The complete checksum object can also be reset
            so it can be used again with new data.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Reset">
            <summary>
            Resets the data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Int32)">
            <summary>
            Adds one byte to the data checksum.
            </summary>
            <param name = "bval">
            the data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[])">
            <summary>
            Updates the data checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.IChecksum.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.IChecksum.Value">
            <summary>
            Returns the data checksum computed so far.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Adler32.BASE">
            <summary>
            largest prime smaller than 65536
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.#ctor">
            <summary>
            Creates a new instance of the Adler32 class.
            The checksum starts off with a value of 1.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Reset">
            <summary>
            Resets the Adler32 checksum to the initial value.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Int32)">
            <summary>
            Updates the checksum with the byte b.
            </summary>
            <param name="bval">
            The data value to add. The high byte of the int is ignored.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[])">
            <summary>
            Updates the checksum with an array of bytes.
            </summary>
            <param name="buffer">
            The source of the data to update with.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Adler32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buf">
            an array of bytes
            </param>
            <param name="off">
            the start of the data used for this update
            </param>
            <param name="len">
            the number of bytes to use for this update
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Adler32.Value">
            <summary>
            Returns the Adler32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2Constants">
            <summary>
            Defines internal values for both compression and decompression
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.rNums">
            <summary>
            Random numbers used to randomise repetitive blocks
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.baseBlockSize">
            <summary>
            When multiplied by compression parameter (1-9) gives the block size for compression
            9 gives the best compresssion but uses the most memory.
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MAX_ALPHA_SIZE">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MAX_CODE_LEN">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.RUNA">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.RUNB">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.N_GROUPS">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.G_SIZE">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.N_ITERS">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.MAX_SELECTORS">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.BZip2.BZip2Constants.NUM_OVERSHOOT_BYTES">
            <summary>
            Backend constant
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2">
            <summary>
            Does all the compress and decompress pre-operation stuff.
            Sets up the streams and file header characters.
            Uses multiply overloaded methods to call for the compress/decompress.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2.Decompress(System.IO.Stream,System.IO.Stream)">
            <summary>
            Decompress <paramref name="instream">input</paramref> writing 
            decompressed data to <paramref name="outstream">output stream</paramref>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2.Compress(System.IO.Stream,System.IO.Stream,System.Int32)">
            <summary>
            Compress <paramref name="instream">input stream</paramref> sending 
            result to <paramref name="outputstream">output stream</paramref>
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer">
            <summary>
            This class is general purpose class for writing data to a buffer.
            
            It allows you to write bits as well as bytes
            Based on DeflaterPending.java
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.buf">
            <summary>Internal work buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor">
            <summary>
            construct instance using default buffer size of 4096
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.#ctor(System.Int32)">
            <summary>
            construct instance using specified buffer size
            </summary>
            <param name="bufsize">
            size to use for internal buffer
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Reset">
            <summary>
            Clear internal state/buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteByte(System.Int32)">
            <summary>
            write a byte to buffer
            </summary>
            <param name="b">
            value to write
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShort(System.Int32)">
            <summary>
            Write a short value to buffer LSB first
            </summary>
            <param name="s">
            value to write
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteInt(System.Int32)">
            <summary>
            write an integer LSB first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBlock(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Write a block of data to buffer
            </summary>
            <param name="block">data to write</param>
            <param name="offset">offset of first byte to write</param>
            <param name="len">number of bytes to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.AlignToByte">
            <summary>
            Align internal buffer on a byte boundary
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteBits(System.Int32,System.Int32)">
            <summary>
            Write bits to internal buffer
            </summary>
            <param name="b">source of bits</param>
            <param name="count">number of bits to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.WriteShortMSB(System.Int32)">
            <summary>
            Write a short value to internal buffer most significant byte first
            </summary>
            <param name="s">value to write</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.Flush(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Flushes the pending buffer into the given output array.  If the
            output array is to small, only a partial flush is done.
            </summary>
            <param name="output">
            the output array;
            </param>
            <param name="offset">
            the offset into output array;
            </param>
            <param name="length">		
            length the maximum number of bytes to store;
            </param>
            <exception name="ArgumentOutOfRangeException">
            IndexOutOfBoundsException if offset or length are invalid.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.ToByteArray">
            <summary>
            Convert internal buffer to byte array.
            Buffer is empty on completion
            </summary>
            <returns>
            converted buffer contents contents
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.BitCount">
            <summary>
            The number of bits written to the buffer
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.PendingBuffer.IsFlushed">
            <summary>
            Indicates if buffer has been flushed
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending">
            <summary>
            This class stores the pending output of the Deflater.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending.#ctor">
            <summary>
            Construct instance with default buffer size
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.IScanFilter">
            <summary>
            Scanning filters support these operations.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.IScanFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if is 'matches' the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>Returns true if the name matches the filter, false if it does not match.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.PathFilter">
            <summary>
            PathFilter filters directories and files by full path name.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.PathFilter.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.PathFilter"></see>.
            </summary>
            <param name="filter">The <see cref="T:ICSharpCode.SharpZipLib.Core.NameFilter"></see>filter expression to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.PathFilter.IsMatch(System.String)">
            <summary>
            Test a name to see if it matches the filter.
            </summary>
            <param name="name">The name to test.</param>
            <returns>True if the name matches, false otherwise.</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter">
            <summary>
            NameAnsSizeFilter filters based on name and file size.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.#ctor(System.String,System.Int64,System.Int64)">
            <summary>
            Initialise a new instance of NameAndSizeFilter.
            </summary>
            <param name="filter">The filter to apply.</param>
            <param name="minSize">The minimum file size to include.</param>
            <param name="maxSize">The maximum file size to include.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.IsMatch(System.String)">
            <summary>
            Test a filename to see if it matches the filter.
            </summary>
            <param name="fileName">The filename to test.</param>
            <returns>True if the filter matches, false otherwise.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.MinSize">
            <summary>
            The minimum size for a file that will match this filter.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.NameAndSizeFilter.MaxSize">
            <summary>
            The maximum size for a file that will match this filter.
            </summary>
        </member>
        <!-- 对于成员“T:RealTime.Common.CommonClass.DBF.FPTFile”忽略有格式错误的 XML 注释 -->
        <member name="M:RealTime.Common.CommonClass.DBF.FPTFile.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.FPTFile.NewFile(System.String)">
            <summary>
            创建新文件
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.FPTFile.Add(System.Object)">
            <summary>
            添加内容
            </summary>
            <param name="_value">值</param>
            <returns>长度</returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.FPTFile.Close">
            <summary>
            关闭文件
            </summary>
        </member>
        <member name="T:Gta.RealTimeTest.CpuUsage">
            <summary>
            模块编号：监控端功能模块
            作用：获取进程的cpu使用率
            作者：李敏
            编写日期：2009-01-08
            </summary>
        </member>
        <member name="M:Gta.RealTimeTest.CpuUsage.GetUsage">
            <summary>
            Gets the usage.
            </summary>
            <returns></returns>
        </member>
        <member name="M:Gta.RealTimeTest.CpuUsage.SubtractTimes(System.Runtime.InteropServices.ComTypes.FILETIME,System.Runtime.InteropServices.ComTypes.FILETIME)">
            <summary>
            
            </summary>
            <param name="a"></param>
            <param name="b"></param>
            <returns></returns>
        </member>
        <member name="P:Gta.RealTimeTest.CpuUsage.EnoughTimePassed">
            <summary>
            Gets a value indicating whether [enough time passed].
            </summary>
            <value><c>true</c> if [enough time passed]; otherwise, <c>false</c>.</value>
        </member>
        <member name="P:Gta.RealTimeTest.CpuUsage.IsFirstRun">
            <summary>
            Gets a value indicating whether this instance is first run.
            </summary>
            <value>
            	<c>true</c> if this instance is first run; otherwise, <c>false</c>.
            </value>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.StrangeCRC">
            <summary>
            Bzip2 checksum algorithm
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.#ctor">
            <summary>
            Initialise a default instance of <see cref="T:ICSharpCode.SharpZipLib.Checksums.StrangeCRC"></see>
            </summary>	
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Reset">
            <summary>
            Reset the state of Crc.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Int32)">
            <summary>
            Update the Crc value.
            </summary>
            <param name="inCh">data update is based on</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[])">
            <summary>
            Update Crc based on a block of data
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Update Crc based on a portion of a block of data
            </summary>
            <param name="buf">block of data</param>
            <param name="off">index of first byte to use</param>
            <param name="len">number of bytes to use</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.StrangeCRC.Value">
            <summary>
            Get the current Crc value.
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.DBF.DBFDataType">
            <summary>
            字段类型，详细请看文件DatatypesDESC.htm,暂时就支持这几个类型吧
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.DBFDataType.Integer">
            <summary>
            I:整型 为4个字节长度
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.DBFDataType.Character">
            <summary>
            C:ASCII text 小于 254 characters long in dBASE.
             Character fields can be up to 32 KB long (in Clipper and FoxPro) using decimal count as high byte in field length.
             It's possible to use up to 64KB long fields by reading length as unsigned. 
             Only fields 小于等于 100 characters can be indexed. 
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.DBFDataType.Float">
            <summary>
            F:(dBASE IV and later, FoxPro, Clipper) 20 digits
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.DBFDataType.Date">
            <summary>
            D:Date in format YYYYMMDD. A date like 0000-00-00 is *NOT* valid.  
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.DBFDataType.Memo">
            <summary>
            M:Pointer to ASCII text field in memo file 10 digits representing a pointer to a DBT block (default is blanks).  
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.DBFDataType.Number">
            <summary>
            ASCII text 18 characters long. Valid characters:
             "0" - "9" and "-". Number fields can be up to 20 characters long in FoxPro and Clipper. 
            </summary>
        </member>
        <!-- 对于成员“T:RealTime.Common.CommonClass.DBF.DBFDataTypeMaxLength”忽略有格式错误的 XML 注释 -->
        <member name="F:RealTime.Common.CommonClass.DBF.DBFDataTypeMaxLength.Integer">
            <summary>
            整型为4个字节，这个和操作系统有关的
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.DBFDataTypeMaxLength.Character">
            <summary>
            字符最大长度 
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.DBFDataTypeMaxLength.Float">
            <summary>
            浮点型
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.DBFDataTypeMaxLength.Date">
            <summary>
            日期
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.DBFDataTypeMaxLength.Memo">
            <summary>
            备注
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.DBF.DBFDataTypeMaxLength.Number">
            <summary>
            数字型是字符串来的
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform">
            <summary>
            ZipNameTransform transforms name as per the Zip file convention.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#ctor">
            <summary>
            Initialize a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
            <remarks>Relative paths default to true with this constructor.</remarks>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#ctor(System.Boolean)">
            <summary>
            Initialize a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
            <param name="useRelativePaths">If true relative paths are created, 
            if false absolute paths are created. </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.#ctor(System.Boolean,System.String)">
            <summary>
            Initialize a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipNameTransform"></see>
            </summary>
            <param name="useRelativePaths">If true relative paths are created, 
            if false absolute paths are created. </param>
            <param name="trimPrefix">The string to trim from front of paths if found.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TransformDirectory(System.String)">
            <summary>
            Transform a directory name according to the Zip file naming conventions.
            </summary>
            <param name="name">The directory name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TransformFile(System.String)">
            <summary>
            Transform a file name according to the Zip file naming conventions.
            </summary>
            <param name="name">The file name to transform.</param>
            <returns>The transformed name.</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipNameTransform.TrimPrefix">
            <summary>
            Get/set the path prefix to be trimmed from paths if present.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator">
             <summary>
             This class allows us to retrieve a specified number of bits from
             the input buffer, as well as copy big byte blocks.
            
             It uses an int buffer to store up to 31 bits for direct
             manipulation.  This guarantees that we can get at least 16 bits,
             but we only need at most 15, so this is all safe.
            
             There are some optimizations in this class, for example, you must
             never peek more than 8 bits more than needed, and you must first
             peek bits before you may drop them.  This is not a general purpose
             class but optimized for the behaviour of the Inflater.
            
             authors of the original java version : John Leuner, Jochen Hoenicke
             </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.PeekBits(System.Int32)">
            <summary>
            Get the next n bits but don't increase input pointer.  n must be
            less or equal 16 and if this call succeeds, you must drop
            at least n - 8 bits in the next call.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.  */
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.DropBits(System.Int32)">
            <summary>
            Drops the next n bits from the input.  You should have called PeekBits
            with a bigger or equal n before, to make sure that enough bits are in
            the bit buffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.GetBits(System.Int32)">
            <summary>
            Gets the next n bits and increases input pointer.  This is equivalent
            to PeekBits followed by dropBits, except for correct error handling.
            </summary>
            <returns>
            the value of the bits, or -1 if not enough bits available.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SkipToByteBoundary">
            <summary>
            Skips to the next byte boundary.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.CopyBytes(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Copies length bytes from input buffer to output buffer starting
            at output[offset].  You have to make sure, that the buffer is
            byte aligned.  If not enough bytes are available, copies fewer
            bytes.
            </summary>
            <param name="output">
            The buffer to copy bytes to.
            </param>
            <param name="offset">
            The offset in the buffer at which copying starts
            </param>
            <param name="length">
            The length to copy, 0 is allowed.
            </param>
            <returns>
            The number of bytes copied, 0 if no bytes were available.
            </returns>
            <exception cref="T:System.ArgumentOutOfRangeException">
            Length is less than zero
            </exception>
            <exception cref="T:System.InvalidOperationException">
            Bit buffer isnt byte aligned
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.#ctor">
            <summary>
            Constructs a default StreamManipulator with all buffers empty
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.Reset">
            <summary>
            resets state and empties internal buffers
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.SetInput(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Add more input for consumption.
            Only call when IsNeedingInput returns true
            </summary>
            <param name="buf">data to be input</param>
            <param name="off">offset of first byte of input</param>
            <param name="len">length of input</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBits">
            <summary>
            Gets the number of bits available in the bit buffer.  This must be
            only called when a previous PeekBits() returned -1.
            </summary>
            <returns>
            the number of bits available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.AvailableBytes">
            <summary>
            Gets the number of bytes available.
            </summary>
            <returns>
            The number of bytes available.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.Compression.Streams.StreamManipulator.IsNeedingInput">
            <summary>
            Returns true when SetInput can be called
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ScanEventArgs">
            <summary>
            Event arguments for scanning.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ScanEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.ScanEventArgs"/>
            </summary>
            <param name="name"></param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanEventArgs.Name">
            <summary>
            The name for this event.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanEventArgs.ContinueRunning">
            <summary>
            Get set a value indicating if scanning should continue or not.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs">
            <summary>
            Event arguments for directories.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs.#ctor(System.String,System.Boolean)">
            <summary>
            Initialize an instance of <see cref="T:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs"></see>.
            </summary>
            <param name="name">The name for this directory.</param>
            <param name="hasMatchingFiles">Flag value indicating if any matching files are contained in this directory.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.DirectoryEventArgs.HasMatchingFiles">
            <summary>
            Get a value indicating if the directory contains any matching files or not.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs">
            <summary>
            Arguments passed when scan failures are detected.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.#ctor(System.String,System.Exception)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs"></see>
            </summary>
            <param name="name">The name to apply.</param>
            <param name="e">The exception to use.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.Name">
            <summary>
            The applicable name.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.Exception">
            <summary>
            The applicable exception.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Core.ScanFailureEventArgs.ContinueRunning">
            <summary>
            Get / set a value indicating wether scanning should continue.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ProcessDirectoryDelegate">
            <summary>
            Delegate invokked when a directory is processed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.ProcessFileDelegate">
            <summary>
            Delegate invoked when a file is processed.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.DirectoryFailureDelegate">
            <summary>
            Delegate invoked when a directory failure is detected.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.FileFailureDelegate">
            <summary>
            Delegate invoked when a file failure is detected.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner">
            <summary>
            FileSystemScanner provides facilities scanning of files and directories.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="filter">The file filter to apply when scanning.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(System.String,System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:ICSharpCode.SharpZipLib.Core.NameFilter"></see>filter to apply.</param>
            <param name="directoryFilter">The directory <see cref="T:ICSharpCode.SharpZipLib.Core.NameFilter"></see>filter to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:ICSharpCode.SharpZipLib.Core.NameFilter"></see>filter to apply.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.#ctor(ICSharpCode.SharpZipLib.Core.IScanFilter,ICSharpCode.SharpZipLib.Core.IScanFilter)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Core.FileSystemScanner"></see>
            </summary>
            <param name="fileFilter">The file <see cref="T:ICSharpCode.SharpZipLib.Core.IScanFilter"></see>filter to apply.</param>
            <param name="directoryFilter">The directory <see cref="T:ICSharpCode.SharpZipLib.Core.IScanFilter"></see>filter to apply.</param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.ProcessDirectory">
            <summary>
            Delegate to invoke when a directory is processed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.ProcessFile">
            <summary>
            Delegate to invoke when a file is processed.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.DirectoryFailure">
            <summary>
            Delegate to invoke when a directory failure is detected.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.FileFailure">
            <summary>
            Delegate to invoke when a file failure is detected.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnDirectoryFailure(System.String,System.Exception)">
            <summary>
            Raise the DirectoryFailure event.
            </summary>
            <param name="directory">Rhe directory name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnFileFailure(System.String,System.Exception)">
            <summary>
            Raise the FileFailure event.
            </summary>
            <param name="file">The file name.</param>
            <param name="e">The exception detected.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnProcessFile(System.String)">
            <summary>
            Raise the ProcessFile event.
            </summary>
            <param name="file">The file name.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.OnProcessDirectory(System.String,System.Boolean)">
            <summary>
            Raise the ProcessDirectory event.
            </summary>
            <param name="directory">The directory name.</param>
            <param name="hasMatchingFiles">Flag indicating if the directory has matching files.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Core.FileSystemScanner.Scan(System.String,System.Boolean)">
            <summary>
            Scan a directory.
            </summary>
            <param name="directory">The base directory to scan.</param>
            <param name="recurse">True to recurse subdirectories, false to do a single directory.</param>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.fileFilter">
            <summary>
            The file filter currently in use.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.directoryFilter">
            <summary>
            The directory filter currently in use.
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Core.FileSystemScanner.alive">
            <summary>
            Falg indicating if scanning is still alive.  Used to cancel a scan.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Checksums.Crc32">
             <summary>
             Generate a table for a byte-wise 32-bit CRC calculation on the polynomial:
             x^32+x^26+x^23+x^22+x^16+x^12+x^11+x^10+x^8+x^7+x^5+x^4+x^2+x+1.
            
             Polynomials over GF(2) are represented in binary, one bit per coefficient,
             with the lowest powers in the most significant bit.  Then adding polynomials
             is just exclusive-or, and multiplying a polynomial by x is a right shift by
             one.  If we call the above polynomial p, and represent a byte as the
             polynomial q, also with the lowest power in the most significant bit (so the
             byte 0xb1 is the polynomial x^7+x^3+x+1), then the CRC is (q*x^32) mod p,
             where a mod b means the remainder after dividing a by b.
            
             This calculation is done using the shift-register method of multiplying and
             taking the remainder.  The register is initialized to zero, and for each
             incoming bit, x^32 is added mod p to the register if the bit is a one (where
             x^32 mod p is p+x^32 = x^26+...+1), and the register is multiplied mod p by
             x (which is shifting right by one and adding x^32 mod p if the bit shifted
             out is a one).  We start with the highest power (least significant bit) of
             q and repeat for all eight bits of q.
            
             The table is simply the CRC of all possible eight bit values.  This is all
             the information needed to generate CRC's on data a byte at a time for all
             combinations of CRC register values and incoming bytes.
             </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Checksums.Crc32.crc">
            <summary>
            The crc data checksum so far.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Reset">
            <summary>
            Resets the CRC32 data checksum as if no update was ever called.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Int32)">
            <summary>
            Updates the checksum with the int bval.
            </summary>
            <param name = "bval">
            the byte is taken as the lower 8 bits of bval
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[])">
            <summary>
            Updates the checksum with the bytes taken from the array.
            </summary>
            <param name="buffer">
            buffer an array of bytes
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Checksums.Crc32.Update(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Adds the byte array to the data checksum.
            </summary>
            <param name = "buf">
            the buffer which contains the data
            </param>
            <param name = "off">
            the offset in the buffer where the data starts
            </param>
            <param name = "len">
            the length of the data
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Checksums.Crc32.Value">
            <summary>
            Returns the CRC32 data checksum computed so far.
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.Log.Logger">
            <summary>
            log4net底层包装类
            作者：蒋小华
            日期：2009-7-28
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.Log.Logger.infoLogger">
            <summary>
            日志
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.Logger.#cctor">
            <summary>
            初始化
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.Logger.Write(System.String)">
            <summary>
            写普通信息
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.Logger.WriteInfo(System.String)">
            <summary>
            写普通信息
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.Logger.WriteError(System.String,System.Exception)">
            <summary>
            写错误信息
            </summary>
            <param name="msg">消息</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.Logger.WriteError(System.String)">
            <summary>
            写错误信息
            </summary>
            <param name="msg">消息</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.Logger.WriteDebug(System.String)">
            <summary>
            写调试信息
            </summary>
            <param name="msg">消息</param>
        </member>
        <!-- 对于成员“T:RealTime.Common.CommonClass.DBF.DBF”忽略有格式错误的 XML 注释 -->
        <member name="M:RealTime.Common.CommonClass.DBF.DBF.#ctor(System.String)">
            <summary>
            构造函数
            </summary>
            <param name="fileName">文件名</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBF.AddField(System.String,RealTime.Common.CommonClass.DBF.DBFDataType,System.Byte,System.Byte)">
            <summary>
            增加一个字段
            </summary>
            <param name="fieldName">字段名</param>
            <param name="fieldType">字段类型</param>
            <param name="fieldLen">字段长度</param>
            <param name="decimalPlace">小数点位数</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBF.NewRow">
            <summary>
            创建新行
            </summary>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBF.Begin">
            <summary>
            开始写文件
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBF.SaveRow(RealTime.Common.CommonClass.DBF.DBFRow)">
            <summary>
            保存一行
            </summary>
            <param name="row">DBF行</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.DBF.DBF.Close">
            <summary>
            结束写文件
            </summary>
        </member>
        <member name="T:RealTime.Common.CommonClass.DataCache">
            <summary>
            缓存操作类
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.DataCache.GetCache(System.String)">
            <summary>
            获取当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey"></param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.DataCache.SetCache(System.String,System.Object)">
            <summary>
            设置当前应用程序指定CacheKey的Cache值
            </summary>
            <param name="CacheKey"></param>
            <param name="objObject"></param>
        </member>
        <member name="T:RealTime.Common.CommonClass.CustomLogHelper">
            <summary>
            调试期间自定义日志
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.CustomLogHelper.logfilesPath">
            <summary>
            日志路径
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.CustomLogHelper.getfilePath">
            <summary>
            缺省的文件名和路径
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.CustomLogHelper.getfilePath(System.String)">
            <summary>
            指定文件名和路径
            </summary>
            <param name="fileName"></param>
        </member>
        <member name="M:RealTime.Common.CommonClass.CustomLogHelper.log(System.Exception,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="Myex"></param>
            <param name="message"></param>
        </member>
        <member name="M:RealTime.Common.CommonClass.CustomLogHelper.log(System.Exception,System.Data.Common.DbParameterCollection)">
            <summary>
            记录日志
            </summary>
            <param name="Myex"></param>
            <param name="Parameters"></param>
        </member>
        <member name="M:RealTime.Common.CommonClass.CustomLogHelper.log(System.String)">
            <summary>
            记录日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="M:RealTime.Common.CommonClass.CustomLogHelper.log(System.String,System.String)">
            <summary>
            记录日志
            </summary>
            <param name="message"></param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman">
            <summary>
            This is the DeflaterHuffman class.
            
            This class is <i>not</i> thread safe.  This is inherent in the API, due
            to the split of deflate and setInput.
            
            author of the original java version : Jochen Hoenicke
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.pending">
            <summary>
            Pending buffer to use
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.BitReverse(System.Int32)">
            <summary>
            Reverse the bits of a 16 bit value.
            </summary>
            <param name="toReverse">Value to reverse bits</param>
            <returns>Value with bits reversed</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterPending)">
            <summary>
            Construct instance with pending buffer
            </summary>
            <param name="pending">Pending buffer to use</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Reset">
            <summary>
            Reset internal state
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.SendAllTrees(System.Int32)">
            <summary>
            Write all trees to pending buffer
            </summary>		
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.CompressBlock">
            <summary>
            Compress current buffer writing data to pending buffer
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushStoredBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with no compression
            </summary>
            <param name="stored">Data to write</param>
            <param name="storedOffset">Index of first byte to write</param>
            <param name="storedLength">Count of bytes to write</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.FlushBlock(System.Byte[],System.Int32,System.Int32,System.Boolean)">
            <summary>
            Flush block to output with compression
            </summary>		
            <param name="stored">Data to flush</param>
            <param name="storedOffset">Index of first byte to flush</param>
            <param name="storedLength">Count of bytes to flush</param>
            <param name="lastBlock">True if this is the last block</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.IsFull">
            <summary>
            Get value indicating if internal buffer is full
            </summary>
            <returns>true if buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyLit(System.Int32)">
            <summary>
            Add literal to buffer
            </summary>
            <param name="lit"></param>
            <returns>Value indicating internal buffer is full</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.TallyDist(System.Int32,System.Int32)">
            <summary>
            Add distance code and length to literal and distance trees
            </summary>
            <param name="dist">Distance code</param>
            <param name="len">Length</param>
            <returns>Value indicating if internal buffer is full</returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.freqs">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.length">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.minNumCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.numCodes">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.#ctor(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman,System.Int32,System.Int32,System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.Reset">
            <summary>
            Resets the internal state of the tree
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteSymbol(System.Int32)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CheckEmpty">
            <summary>
            Check that at least one frequency is non-zero
            </summary>
            <exception cref="T:ICSharpCode.SharpZipLib.SharpZipBaseException">
            No frequencies are non-zero
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.SetStaticCodes(System.Int16[],System.Byte[])">
            <summary>
            Set static codes and length
            </summary>
            <param name="stCodes">new codes</param>
            <param name="stLength">length for new codes</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildCodes">
            <summary>
            Build dynamic codes and lengths
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.BuildTree">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.GetEncodedLength">
            <summary>
            Get encoded length
            </summary>
            <returns>Encoded length, the sum of frequencies * lengths</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.CalcBLFreq(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Not documented
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree.WriteTree(ICSharpCode.SharpZipLib.Zip.Compression.DeflaterHuffman.Tree)">
            <summary>
            Write tree values
            </summary>
            <param name="blTree">Tree to write</param>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream">
            <summary>
            The TarInputStream reads a UNIX tar archive as an InputStream.
            methods are provided to position at each successive entry in
            the archive, and the read each entry as a normal input stream
            using read().
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.hasHitEOF">
            <summary>
            Flag set when last block has been read
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.entrySize">
            <summary>
            Size of this entry as recorded in header
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.entryOffset">
            <summary>
            Number of bytes read for this entry so far
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.readBuf">
            <summary>
            Buffer used with calls to <code>Read()</code>
            </summary>		
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.buffer">
            <summary>
            Working buffer
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.currEntry">
            <summary>
            Current entry being read
            </summary>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Tar.TarInputStream.eFactory">
            <summary>
            Factory used to create TarEntry or descendant class instance
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Flush">
            <summary>
            Flushes the baseInputStream
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of the stream
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct a TarInputStream with default block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.#ctor(System.IO.Stream,System.Int32)">
            <summary>
            Construct a TarInputStream with user specified block factor
            </summary>
            <param name="inputStream">stream to source data from</param>
            <param name="blockFactor">block factor to apply to archive</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.SetEntryFactory(ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory)">
            <summary>
            Set the entry factory for this instance.
            </summary>
            <param name="factory">The factory for creating new entries</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Close">
            <summary>
            Closes this stream. Calls the TarBuffer's close() method.
            The underlying stream is closed by the TarBuffer.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.GetRecordSize">
            <summary>
            Get the record size being used by this stream's TarBuffer.
            </summary>
            <returns>
            TarBuffer record size.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Skip(System.Int64)">
            <summary>
            Skip bytes in the input buffer. This skips bytes in the
            current entry's data, not the entire archive, and will
            stop at the end of the current entry's data if the number
            to skip extends beyond that point.
            </summary>
            <param name="numToSkip">
            The number of bytes to skip.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Mark(System.Int32)">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
            <param name ="markLimit">
            The limit to mark.
            </param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Reset">
            <summary>
            Since we do not support marking just yet, we do nothing.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.GetNextEntry">
            <summary>
            Get the next entry in this tar archive. This will skip
            over any remaining data in the current entry, if there
            is one, and place the input stream at the header of the
            next entry, and read the header and instantiate a new
            TarEntry from the header bytes and return that entry.
            If there are no more entries in the archive, null will
            be returned to indicate that the end of the archive has
            been reached.
            </summary>
            <returns>
            The next TarEntry in the archive, or null.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.ReadByte">
            <summary>
            Reads a byte from the current tar archive entry.
            This method simply calls read(byte[], int, int).
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Reads bytes from the current tar archive entry.
            
            This method is aware of the boundaries of the current
            entry in the archive and will deal with them appropriately
            </summary>
            <param name="outputBuffer">
            The buffer into which to place bytes read.
            </param>
            <param name="offset">
            The offset at which to place bytes read.
            </param>
            <param name="count">
            The number of bytes to read.
            </param>
            <returns>
            The number of bytes read, or 0 at end of stream/EOF.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.CopyEntryContents(System.IO.Stream)">
            <summary>
            Copies the contents of the current tar archive entry directly into
            an output stream.
            </summary>
            <param name="outputStream">
            The OutputStream into which to write the entry's data.
            </param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanRead">
            <summary>
            Gets a value indicating whether the current stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking
            This property always returns false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.CanWrite">
            <summary>
            Gets a value indicating if the stream supports writing.
            This property always returns false.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Length">
            <summary>
            The length in bytes of the stream
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Position">
            <summary>
            Gets or sets the position within the stream. 
            Setting the Position is not supported and throws a NotSupportedExceptionNotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set position</exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.Available">
            <summary>
            Get the available data that can be read from the current
            entry in the archive. This does not indicate how much data
            is left in the entire archive, only in the current entry.
            This value is determined from the entry's size header field
            and the amount of data already read from the current entry.
            </summary>
            <returns>
            The number of available bytes for the current entry.
            </returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Tar.TarInputStream.IsMarkSupported">
            <summary>
            Since we do not support marking just yet, we return false.
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory">
            <summary>
            This interface is provided, along with the method setEntryFactory(), to allow
            the programmer to have their own TarEntry subclass instantiated for the
            entries return from getNextEntry().
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntry(System.String)">
            <summary>
            Create an entry based on name alone
            </summary>
            <param name="name">
            Name of the new EntryPointNotFoundException to create
            </param>
            <returns>created TarEntry or descendant class</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntryFromFile(System.String)">
            <summary>
            Create an instance based on an actual file
            </summary>
            <param name="fileName">
            Name of file to represent in the entry
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.IEntryFactory.CreateEntry(System.Byte[])">
            <summary>
            Create a tar entry based on the header information passed
            </summary>
            <param name="headerBuf">
            Buffer containing header information to base entry on
            </param>
            <returns>
            Created TarEntry or descendant class
            </returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter">
            <summary>
            Standard entry factory class creating instances of the class TarEntry
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.String)">
            <summary>
            Create a TarEntry based on named
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntryFromFile(System.String)">
            <summary>
            Create a tar entry with details obtained from <paramref name="fileName">file</paramref>
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Tar.TarInputStream.EntryFactoryAdapter.CreateEntry(System.Byte[])">
            <summary>
            Create and entry based on details in <paramref name="headerBuf">header</paramref>
            </summary>			
        </member>
        <member name="T:RealTime.Common.CommonClass.TranToPy">
            <summary>
            
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.TranToPy.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.TranToPy.convert(System.String)">
            <summary>
            汉字转化为拼音主函数
            </summary>
            <param name="chrstr"></param>
            <returns></returns>
        </member>
        <member name="M:RealTime.Common.CommonClass.TranToPy.ChToPyType(System.String,System.Int32)">
            <summary>
            根据不同的要求转化拼音
            </summary>
            <param name="ChString"></param>
            <param name="Vflag"></param>
            <returns></returns>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs">
            <summary>
            Arguments used with KeysRequiredEvent
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.#ctor(System.String)">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.#ctor(System.String,System.Byte[])">
            <summary>
            Initialise a new instance of <see cref="T:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs"></see>
            </summary>
            <param name="name">The name of the file for which keys are required.</param>
            <param name="keyValue">The current key value.</param>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.FileName">
            <summary>
            Get the name of the file for which keys are required.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.KeysRequiredEventArgs.Key">
            <summary>
            Get/set the key value
            </summary>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile">
            <summary>
            This class represents a Zip archive.  You can ask for the contained
            entries, or get an input stream for a file entry.  The entry is
            automatically decompressed.
            
            This class is thread safe:  You can open input streams for arbitrary
            entries in different threads.
            <br/>
            <br/>Author of the original java version : Jochen Hoenicke
            </summary>
            <example>
            <code>
            using System;
            using System.Text;
            using System.Collections;
            using System.IO;
            
            using ICSharpCode.SharpZipLib.Zip;
            
            class MainClass
            {
            	static public void Main(string[] args)
            	{
            		ZipFile zFile = new ZipFile(args[0]);
            		Console.WriteLine("Listing of : " + zFile.Name);
            		Console.WriteLine("");
            		Console.WriteLine("Raw Size    Size      Date     Time     Name");
            		Console.WriteLine("--------  --------  --------  ------  ---------");
            		foreach (ZipEntry e in zFile) {
            			DateTime d = e.DateTime;
            			Console.WriteLine("{0, -10}{1, -10}{2}  {3}   {4}", e.Size, e.CompressedSize,
            			                                                    d.ToString("dd-MM-yy"), d.ToString("t"),
            			                                                    e.Name);
            		}
            	}
            }
            </code>
            </example>
        </member>
        <member name="F:ICSharpCode.SharpZipLib.Zip.ZipFile.KeysRequired">
            <summary>
            Event handler for handling encryption keys.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.OnKeysRequired(System.String)">
            <summary>
            Handles getting of encryption keys when required.
            </summary>
            <param name="fileName">The file for which encryptino keys are required.</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.String)">
            <summary>
            Opens a Zip file with the given name for reading.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.FileStream)">
            <summary>
            Opens a Zip file reading the given FileStream
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.#ctor(System.IO.Stream)">
            <summary>
            Opens a Zip file reading the given Stream
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The file doesn't contain a valid zip archive.<br/>
            The stream provided cannot seek
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLeShort">
            <summary>
            Read an unsigned short in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadLeInt">
            <summary>
            Read an int in little endian byte order.
            </summary>
            <returns>Returns the value read.</returns>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:System.IO.EndOfStreamException">
            The file ends prematurely
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.ReadEntries">
            <summary>
            Search for and read the central directory of a zip file filling the entries
            array.  This is called exactly once by the constructors.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The central directory is malformed or cannot be found
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Close">
            <summary>
            Closes the ZipFile.  If the stream is <see cref="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsStreamOwner">owned</see> then this also closes the underlying input stream.
            Once closed, no further instance methods should be called.
            </summary>
            <exception cref="T:System.IO.IOException">
            An i/o error occurs.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetEnumerator">
            <summary>
            Returns an enumerator for the Zip entries in this Zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.FindEntry(System.String,System.Boolean)">
            <summary>
            Return the index of the entry with a matching name
            </summary>
            <param name="name">Entry name to find</param>
            <param name="ignoreCase">If true the comparison is case insensitive</param>
            <returns>The index position of the matching entry or -1 if not found</returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetEntry(System.String)">
            <summary>
            Searches for a zip entry in this archive with the given name.
            String comparisons are case insensitive
            </summary>
            <param name="name">
            The name to find. May contain directory components separated by slashes ('/').
            </param>
            <returns>
            The zip entry, or null if no entry with that name exists.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestArchive(System.Boolean)">
            <summary>
            Test an archive for integrity/validity
            </summary>
            <param name="testData">Perform low level data Crc check</param>
            <returns>true iff the test passes, false otherwise</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.TestLocalHeader(ICSharpCode.SharpZipLib.Zip.ZipEntry,System.Boolean,System.Boolean)">
            <summary>
            Test the local header against that provided from the central directory
            </summary>
            <param name="entry">
            The entry to test against
            </param>
            <param name="fullTest">
            If true be extremely picky about the testing, otherwise be relaxed
            </param>
            <param name="extractTest">
            Apply extra testing to see if the entry can be extracted by the library
            </param>
            <returns>The offset of the entries data in the file</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.CheckLocalHeader(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Checks, if the local header of the entry at index i matches the
            central directory, and returns the offset to the data.
            </summary>
            <returns>
            The start offset of the (compressed) data.
            </returns>
            <exception cref="T:System.IO.EndOfStreamException">
            The stream ends prematurely
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The local header signature is invalid, the entry and central header file name lengths are different
            or the local and entry compression methods dont match
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetOutputStream(ICSharpCode.SharpZipLib.Zip.ZipEntry,System.String)">
            <summary>
            Gets an output stream for the specified <see cref="T:ICSharpCode.SharpZipLib.Zip.ZipEntry"/>
            </summary>
            <param name="entry">The entry to get an outputstream for.</param>
            <param name="fileName"></param>
            <returns>The output stream obtained for the entry.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(ICSharpCode.SharpZipLib.Zip.ZipEntry)">
            <summary>
            Creates an input stream reading the given zip entry as
            uncompressed data.  Normally zip entry should be an entry
            returned by GetEntry().
            </summary>
            <returns>
            the input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.GetInputStream(System.Int32)">
            <summary>
            Creates an input stream reading a zip entry
            </summary>
            <param name="entryIndex">The index of the entry to obtain an input stream for.</param>
            <returns>
            An input stream.
            </returns>
            <exception cref="T:System.InvalidOperationException">
            The ZipFile has already been closed
            </exception>
            <exception cref="T:ICSharpCode.SharpZipLib.Zip.ZipException">
            The compression method for the entry is unknown
            </exception>
            <exception cref="T:System.IndexOutOfRangeException">
            The entry is not found in the ZipFile
            </exception>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Key">
            <summary>
            Get/set the encryption key value.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Password">
            <summary>
            Password to be used for encrypting/decrypting files.
            </summary>
            <remarks>Set to null if no password is required.</remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.IsStreamOwner">
            <summary>
            Get/set a flag indicating if the underlying stream is owned by the ZipFile instance.
            If the flag is true then the stream will be closed when <see cref="M:ICSharpCode.SharpZipLib.Zip.ZipFile.Close">Close</see> is called.
            </summary>
            <remarks>
            The default value is true in all cases.
            </remarks>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.EntryByIndex(System.Int32)">
            <summary>
            Indexer property for ZipEntries
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.ZipFileComment">
            <summary>
            Gets the comment for the zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Name">
            <summary>
            Gets the name of this zip file.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.Zip.ZipFile.Size">
            <summary>
            Gets the number of entries in this zip file.
            </summary>
            <exception cref="T:System.InvalidOperationException">
            The Zip file has been closed.
            </exception>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.Zip.ZipFile.KeysRequiredEventHandler">
            <summary>
            Delegate for handling keys/password setting during compresion/decompression.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.ReadByte">
            <summary>
            Read a byte from this stream.
            </summary>
            <returns>Returns the byte read or -1 on end of stream.</returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.Zip.ZipFile.PartialInputStream.Close">
            <summary>
            Close this partial input stream.
            </summary>
            <remarks>
            The underlying stream is not closed.  Close the parent ZipFile class to do that.
            </remarks>
        </member>
        <member name="T:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream">
            <summary>
            An input stream that decompresses files in the BZip2 format 
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Flush">
            <summary>
            Flushes the stream.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Seek(System.Int64,System.IO.SeekOrigin)">
            <summary>
            Set the streams position.  This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.SetLength(System.Int64)">
            <summary>
            Sets the length of this stream to the given value.
            This operation is not supported and will throw a NotSupportedExceptionortedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Write(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Writes a block of bytes to this stream using data from a buffer.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.WriteByte(System.Byte)">
            <summary>
            Writes a byte to the current position in the file stream.
            This operation is not supported and will throw a NotSupportedException
            </summary>
            <exception cref="T:System.NotSupportedException">Any access</exception>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Read(System.Byte[],System.Int32,System.Int32)">
            <summary>
            Read a sequence of bytes and advances the read position by one byte.
            </summary>
            <param name="b">Array of bytes to store values in</param>
            <param name="offset">Offset in array to begin storing data</param>
            <param name="count">The maximum number of bytes to read</param>
            <returns>The total number of bytes read into the buffer. This might be less
            than the number of bytes requested if that number of bytes are not 
            currently available or zero if the end of the stream is reached.
            </returns>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Close">
            <summary>
            Closes the stream, releasing any associated resources.
            </summary>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.#ctor(System.IO.Stream)">
            <summary>
            Construct instance for reading from stream
            </summary>
            <param name="stream">Data source</param>
        </member>
        <member name="M:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.ReadByte">
            <summary>
            Read a byte from stream advancing position
            </summary>
            <returns>byte read or -1 on end of stream</returns>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanRead">
            <summary>
            Gets a value indicating if the stream supports reading
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanSeek">
            <summary>
            Gets a value indicating whether the current stream supports seeking.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.CanWrite">
            <summary>
            Gets a value indicating whether the current stream supports writing.
            This property always returns false
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Length">
            <summary>
            Gets the length in bytes of the stream.
            </summary>
        </member>
        <member name="P:ICSharpCode.SharpZipLib.BZip2.BZip2InputStream.Position">
            <summary>
            Gets or sets the streams position.
            Setting the position is not supported and will throw a NotSupportException
            </summary>
            <exception cref="T:System.NotSupportedException">Any attempt to set the position</exception>
        </member>
        <member name="T:RealTime.Common.CommonClass.Log.LogHandle">
            <summary>
            Log 的摘要说明。
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHandle.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHandle.Log(System.String)">
            <summary>
            日志
            </summary>
            <param name="_Message">日志信息</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHandle.Log(System.String,RealTime.Common.CommonClass.Log.LogHandle.LogType)">
            <summary>
            日志
            </summary>
            <param name="_Message">日志信息</param>
            <param name="_LogType">类型</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHandle.LogInformation(System.String)">
            <summary>
            日志信息类
            </summary>
            <param name="_Message">日志信息</param>		
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHandle.LogError(System.String)">
            <summary>
            日志异常类
            </summary>
            <param name="_Message">日志信息</param>		
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHandle.LogError(System.String,System.String,System.Exception)">
            <summary>
            日志异常类
            </summary>
            <param name="_Class">类名（带命名空间）</param>
            <param name="_Function">方法名</param>
            <param name="_ex">异常类</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHandle.LogError(System.String,System.String,System.String,System.String)">
            <summary>
            日志异常类
            </summary>
            <param name="_Class">类名（带命名空间）</param>
            <param name="_Function">方法名</param>
            <param name="_Message">当前异常的消息</param>
            <param name="_StackTrace">当前异常发生时堆栈上的帧的字符串表m示形式</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHandle.LogInformation(System.Int32,System.String,System.DateTime,System.DateTime)">
            <summary>
            日志信息类
            </summary>
            <param name="_Message">日志信息</param>		
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHandle.Log(System.Int32,System.String,RealTime.Common.CommonClass.Log.LogHandle.LogType,System.DateTime,System.DateTime)">
            <summary>
            日志
            </summary>
            <param name="_Message">日志信息</param>
            <param name="_LogType">类型</param>
            <param name="_FilePath">日志文件名</param>
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHandle.LogInformation(System.String,System.String)">
            <summary>
            日志信息类(HqRecorder)
            </summary>
            <param name="_Message">日志信息</param>		
        </member>
        <member name="M:RealTime.Common.CommonClass.Log.LogHandle.Log(System.String,System.String,RealTime.Common.CommonClass.Log.LogHandle.LogType)">
            <summary>
            日志
            </summary>
            <param name="_Message">日志信息</param>
            <param name="_LogType">类型</param>
            <param name="_FilePath">日志文件名</param>
        </member>
        <member name="F:RealTime.Common.CommonClass.Log.LogHandle.lockObject">
            <summary>
            向个一个文件写入一个串
            </summary>
            <param name="_fileName">文件名</param>
            <param name="_content">输出内容</param>
            <param name="_isAppend">是否追加</param>
        </member>
        <member name="T:RealTime.Common.CommonClass.Log.LogHandle.LogType">
            <summary>
            日志类型
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.Log.LogHandle.LogType.Information">
            <summary>
            消息型
            </summary>
        </member>
        <member name="F:RealTime.Common.CommonClass.Log.LogHandle.LogType.Error">
            <summary>
            异常型
            </summary>
        </member>
        <member name="T:RealTime.Common.ExceptionType">
            <summary>
            异常类型
            </summary>
        </member>
        <member name="F:RealTime.Common.ExceptionType.ETUI">
            <summary>
            用户界面层
            </summary>
        </member>
        <member name="F:RealTime.Common.ExceptionType.ETBll">
            <summary>
            业务逻辑层
            </summary>
        </member>
        <member name="F:RealTime.Common.ExceptionType.ETDal">
            <summary>
            数据访问层
            </summary>
        </member>
        <member name="F:RealTime.Common.ExceptionType.ETSocket">
            <summary>
            Socket通讯组件
            </summary>
        </member>
        <member name="F:RealTime.Common.ExceptionType.ETTransfers">
            <summary>
            业务传输协议编码层
            </summary>
        </member>
        <member name="T:RealTime.Common.ExceptionHelper">
            <summary>
            ExceptionHelper 的摘要说明。
            </summary>
        </member>
    </members>
</doc>
