<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        AAABAAIAEBAAAAEACABoBQAAJgAAABAQAAABACAAaAQAAI4FAAAoAAAAEAAAACAAAAABAAgAAAAAAAAB
        AAAAAAAAAAAAAAABAAAAAQAAAAAAAHtYLAB8Wi8Alm07AJxrOwCmbDUArm83AKF1QQCveEQArH5IALN9
        RgCBf3cAsIBKALeHTgC/j1gAu4xeAIGAeQCjiGkAv5BsALOddADCkFQAzZlbAMmcZgDHkG0Axp9qAMab
        bwDDj3EAwpNxAMSRdADJlnIAwplxAMiZcgDOpnEAwqp+ANOsdQD6vHQACwvAAAwMxAANDcsADg7OAA8P
        0wAQENcAERHaABIS4QATE+cAFBTsABUV8QAkJOUAKCjnACws6gA0NOEAODjjADs75gAwMO0APz/oAEFB
        6gBFRe0ASEjvAExM8QBPT/QAUlL1AFpZ8QAOmtYACprYAC6cxQA6pMYAOqrMADim0QAyqtAAAKfpAACu
        7wAAtfQAKbDoAE2yyQBRssgAR7LXAFzK8QBby/QAYcPoAGHH6wBpz/IAc9DzAHzR8gB81vYAjYyEAJ+e
        lQCMsakAoqKiALGupAC+ua0As7OyALS0tADPn4AAzaOBANKqhwDRpYkA2KqIAN6/igDVq5IA1a6WANm3
        mADctJgA3LqjAN69oADevaoA37+uAMK/vQC/wZ4A3sKOANvAlgDfxJoA38OeAOzEiADix5IA6cuUAOfQ
        nQDFwLYAyca6AODCpgDiyacA5M+mAObRqQDv1K8AgdPwAKvj9gC16PkAv+z6ANLPwgDT09MA29vbAO/f
        zwDw2sEA79/RAPrszADn5doA8ePWAPHi2QDx49wA8e3eAPrw0wD/9d8A8vDjAPry4gD/9+YA8PDpAPTx
        6wDx8O0A+vbpAP326QD/++sA//3pAP757gD//O8A9fXzAPr18wD4+PIA//3yAP779QD///cA///5AAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        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
</value>
  </data>
</root>